<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内网 on 电子荒原</title>
    <link>http://localhost:1313/tags/%E5%86%85%E7%BD%91/</link>
    <description>Recent content in 内网 on 电子荒原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy;召唤兽，&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 20 May 2023 16:06:47 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/%E5%86%85%E7%BD%91/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>穷人的IP-KVM远程访问</title>
      <link>http://localhost:1313/2023/05/20/ipkvm_4_poor_man/</link>
      <pubDate>Sat, 20 May 2023 16:06:47 +0800</pubDate>
      
      <guid>http://localhost:1313/2023/05/20/ipkvm_4_poor_man/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;说起DIY的IP-KVM，当然是&lt;a href=&#34;https://github.com/pikvm/pikvm&#34;&gt;PiKVM&lt;/a&gt;以及一系列衍生项目，可是对于&lt;del&gt;那些把钱投入庞氏骗局的&lt;/del&gt;穷人来说，RPI4已经远不能称为&lt;em&gt;inexpensive&lt;/em&gt;。近几天，我从垃圾堆里翻出了&lt;strong&gt;同样&lt;/strong&gt;昂贵的Phicomm N1和一张30块的视频采集卡，发现正好也能用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/20/ipkvm_4_poor_man/pikvm.png&#34;
    alt=&#34;有较强的自我管理意识.png&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;有较强的自我管理意识.png&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;把远程控制取名叫作IP-KVM，这对于SEO来说过于不友好了。每当搜索Google的时候，总会看到有人试图在N1上跑虚拟化（aka KVM），可能是对2G内存有些什么不切实际的幻想。最后，在GitHub上找到了在N1上安装PiKVM的脚本：&lt;a href=&#34;https://github.com/toss-a/pikvm-armbian&#34;&gt;toss-a/pikvm-armbian&lt;/a&gt;。不过这里的&lt;a href=&#34;https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD&#34;&gt;说明&lt;/a&gt;也稍微有些简略，我会努力稍微详细一点点，尽量。&lt;/p&gt;
&lt;p&gt;那么，需要准备下面这些东西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;N1一台；
&lt;blockquote&gt;
&lt;p&gt;我的N1是从垃圾堆里捡回来的，如果是新购的话，应该会有一些更新、&lt;a href=&#34;https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD#1%E9%80%89%E6%8B%A9%E5%8E%9F%E7%94%9F%E5%B8%A6%E6%9C%89otg%E7%9A%84%E5%BC%80%E5%8F%91%E7%89%88-%E4%BE%8B%E5%A6%82&#34;&gt;更好的选择&lt;/a&gt;。注意，这些选择需要能够OTG。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;USB公对公数据线一条；
&lt;blockquote&gt;
&lt;p&gt;因为N1的USB口有OTG功能，直接连接被控电脑就可以模拟鼠标和键盘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;视频采集卡一张，配HDMI线一条；
&lt;blockquote&gt;
&lt;p&gt;因为N1没有USB3.0接口，MS2109芯片就足够了，可以跑1080p@30Hz。
&lt;img src=&#34;ms2109.webp&#34; alt=&#34;大概长这样：&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;U盘一块；&lt;/li&gt;
&lt;li&gt;Linux知识一些；&lt;/li&gt;
&lt;li&gt;可能会需要：
&lt;ol&gt;
&lt;li&gt;USB键盘一个；&lt;/li&gt;
&lt;li&gt;USB延长线一条；&lt;/li&gt;
&lt;li&gt;理想的上网环境。
&lt;blockquote&gt;
&lt;p&gt;根据相关法律法规和政策（下略）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不需要准备Arduino、BadUSB、USB Rubber Ducky，或者其他的单片机，虽然我的垃圾堆里也有不少。&lt;/p&gt;
&lt;h2 id=&#34;安装系统armbianubuntu口味的&#34;&gt;安装系统：Armbian（Ubuntu口味的）&lt;/h2&gt;
&lt;p&gt;这部分已经有很多人写过了，大概步骤是降级—BalenaEcther镜像写入U盘—Armbian写入EMMC。可以参考&lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/README.cn.md#%E5%AE%89%E8%A3%85-armbian-%E5%88%B0-emmc&#34;&gt;GitHub说明&lt;/a&gt;、&lt;a href=&#34;https://ethanblog.com/tips/play-with-n1-box.html&#34;&gt;其他人的博客&lt;/a&gt;或者&lt;a href=&#34;https://www.bilibili.com/video/BV1QJ411k7AH/&#34;&gt;B站&lt;/a&gt;。要注意，在盒子的原始系统尚未关机时不要插入U盘，Android系统会破坏U盘文件的权限。&lt;/p&gt;
&lt;p&gt;Armbian镜像我使用的是&lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/releases/download/Armbian_jammy_lts_2023.05/Armbian_23.05.0_amlogic_s905d_jammy_6.1.27_server_2023.05.13.img.gz&#34;&gt;Armbian_23.05.0_amlogic_s905d_jammy_6.1.27_server_2023.05.13.img.gz&lt;/a&gt;，其中，&lt;code&gt;S905d&lt;/code&gt;是N1所用的芯片，&lt;code&gt;Jammy&lt;/code&gt;是Ubuntu的版本号，&lt;code&gt;6.1.27&lt;/code&gt;代表使用的是最新版本的Linux内核。如果安装PiKVM，Debian系列（bullseye）的软件包有些太老了。&lt;/p&gt;
&lt;h2 id=&#34;修改dtb文件&#34;&gt;修改dtb文件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;好，到这里时，我会假设：N1已经刷成了Ubuntu风味的Armbian系统；连接好网络，有线无线都可以；能够输入命令——不管是直接插键盘显示器，或是通过SSH，还是直接从电路板上引出导线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上述的Armbian引导文件中，默认的USB模式是Host，为了模拟鼠标、键盘等设备，需要将&lt;code&gt;dr_mode&lt;/code&gt;从&lt;code&gt;host&lt;/code&gt;更改为&lt;code&gt;peripheral&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。那么，我们需要重新编译dtb文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 将dtb编译为dts文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dtc -I dtb -O dts -o test.dts /boot/dtb/amlogic/meson-gxl-s905d-phicomm-n1.dtb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 用你喜欢的编辑器打开这个文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim test.dts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;test.dts&lt;/code&gt;中搜索&lt;code&gt;dr_mode&lt;/code&gt;，寻找首个&lt;code&gt;dr_mode = &amp;quot;host&amp;quot;;&lt;/code&gt;，改为&lt;code&gt;dr_mode = &amp;quot;peripheral&amp;quot;;&lt;/code&gt;。
这里的上下文大概是这样：
&lt;img src=&#34;carbon.png&#34; alt=&#34;注意红字位置&#34;&gt;
后面的&lt;code&gt;dr_mode&lt;/code&gt;不必修改。不要问我为什么，这部分超出了我的能力。之后重新把dts编译回去，移动到&lt;code&gt;/boot/dtb/amlogic/&lt;/code&gt;，并且修改启动项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dtc -I dts -O dtb -o n1-test.dtb test.dts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mv n1-test.dtb /boot/dtb/amlogic/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /boot/uEnv.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把&lt;code&gt;FDT&lt;/code&gt;一行改为&lt;code&gt;FDT=/dtb/amlogic/n1-test.dtb&lt;/code&gt;：
&lt;img src=&#34;carbon2.png&#34; alt=&#34;最近觉得carbon.now.sh还挺棒哒&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后重启系统。&lt;/p&gt;
&lt;h2 id=&#34;安装脚本&#34;&gt;安装脚本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;此时，假设你能够透明地访问github和其他网站，&lt;code&gt;curl google.com&lt;/code&gt;返回&lt;code&gt;302&lt;/code&gt;或者&lt;code&gt;200&lt;/code&gt;。如果不行的话，可以尝试在N1上安装&lt;a href=&#34;https://github.com/zfl9/ss-tproxy&#34;&gt;zfl9/ss-tproxy&lt;/a&gt;，让N1同时承担旁路网关的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/toss-a/pikvm-armbian.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; pikvm-armbian
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./install.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在提示&lt;code&gt;&amp;quot;Do you want to apply custom patches?  [y/n] &amp;quot;&lt;/code&gt;时，选择N。&lt;/p&gt;
&lt;p&gt;接下来，重启系统，再次运行&lt;code&gt;install.sh&lt;/code&gt;，然后关机。&lt;/p&gt;
&lt;h2 id=&#34;连线和启动&#34;&gt;连线和启动&lt;/h2&gt;
&lt;p&gt;N1靠近HDMI接口的USB口已经改为OTG从机模式，把双公头USB线插在这里，另一头插到被控计算机上。这时候，如果视频采集卡插不上的话，拿出提前准备好的延长线。下面的照片来自&lt;a href=&#34;https://pockies.github.io/2019/03/07/phicomm-n1/&#34;&gt;这里&lt;/a&gt;，照相技术牛逼疯了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;n1.excalidraw.png&#34; alt=&#34;牛逼疯了！&#34;&gt;&lt;/p&gt;
&lt;p&gt;重新插入电源，用随便的浏览器访问N1的IP地址，并忽略证书错误提示。初始用户名和密码都是&lt;code&gt;admin&lt;/code&gt;，别忘了修改登录密码，用&lt;code&gt;sudo kvmd-htpasswd set admin&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另外，感谢&lt;a href=&#34;https://github.com/pikvm/pikvm&#34;&gt;pikvm&lt;/a&gt;项目，有钱的话就去支持&lt;a href=&#34;https://pikvm.org/&#34;&gt;他们的硬件&lt;/a&gt;吧！&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Ref：&lt;a href=&#34;https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD#%E7%AC%AC%E4%BA%8C%E6%AD%A5&#34;&gt;README&lt;/a&gt;，这个写的其实挺清楚的，比我的好。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>内网访问第三季：在运营商的CGNAT网络下</title>
      <link>http://localhost:1313/2023/05/10/through-nat/</link>
      <pubDate>Wed, 10 May 2023 21:05:13 +0800</pubDate>
      
      <guid>http://localhost:1313/2023/05/10/through-nat/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;是的，在&lt;a href=&#34;http://localhost:1313/2021/07/20/beyond-nat/&#34;&gt;这次&lt;/a&gt;和&lt;a href=&#34;http://localhost:1313/2022/05/22/connect-every-something//#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEtailscaletinc%E6%88%96wireguard&#34;&gt;这次&lt;/a&gt;之后，在酒店里百无聊赖的现在，我又开始折腾起VPN来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，在酒店里仍然没有IPv6地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;为什么&#34;&gt;为什么&lt;/h2&gt;
&lt;p&gt;正如&lt;a href=&#34;http://localhost:1313/2022/05/22/connect-every-something//#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEtailscaletinc%E6%88%96wireguard&#34;&gt;前文&lt;/a&gt;所述，无论是Tailscale/Headscale、Nebula或Netmaker，原理均大同小异，都是在Wireguard基础上，用类STUN协议来穿越NAT，或利用TURN（DERP）服务器进行转发。在国内家庭宽带网络环境下，一般存在路由器、光猫、运营商三重NAT防火墙，STUN需要跨越多重阻碍，自动穿越希望渺茫；另一方面，公开转发服务多在国外，延迟高居不下，而国内私有云价格亦是高不可攀，自建服务并非经济的选择。&lt;/p&gt;
&lt;p&gt;然而，三重NAT也并非坚不可摧。光猫一级，只要改为桥接，便可迎刃而解；路由一级，可以通过端口映射来绕过；而运营商级多为NAT1，通过&lt;a href=&#34;https://github.com/MikeWang000000/Natter/tree/v0.9&#34;&gt;Natter&lt;/a&gt;或&lt;a href=&#34;https://github.com/heiher/natmap&#34;&gt;natmap&lt;/a&gt;，可以获得近似公网的效果。这样，使用纯粹的Wireguard，也能够直接回到家庭网络内部，免去国外中转的烦恼。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/ping1.png&#34;
    alt=&#34;从广东联通到北京联通。&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;从广东联通到北京联通。&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/ping2.png&#34;
    alt=&#34;从广东联通经北京联通到甘肃移动。个人觉得，在这种延迟下追求Full Mesh也不再重要了。&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;从广东联通经北京联通到甘肃移动。个人觉得，在这种延迟下追求Full Mesh也不再重要了。&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;怎么做&#34;&gt;怎么做&lt;/h2&gt;
&lt;p&gt;在开始之前，首先检查是否满足以下要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一台长期开启的设备。
&lt;blockquote&gt;
&lt;p&gt;既然有远程访问的要求，远处有一台服务器是很自然的吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;光猫处于桥接状态。&lt;/li&gt;
&lt;li&gt;主路由是OpenWRT，或者内网里有DMZ主机。
&lt;blockquote&gt;
&lt;p&gt;或者，你是端口转发专家，可以从光猫外侧一路转发到最内部。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;没有公网IPv4，但在路由器处测试NAT类型为NAT1。
&lt;blockquote&gt;
&lt;p&gt;这里可以用&lt;a href=&#34;https://github.com/MikeWang000000/Natter/tree/v0.9&#34;&gt;Natter&lt;/a&gt;自带的功能来测试。如果你有公网IPv4的话，直接打开端口就好，而且我会很羡慕你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;一个自己的域名，最好是在Cloudflare上托管的。
&lt;blockquote&gt;
&lt;p&gt;需要DDNS功能实时更新域名。如果没有域名的话，可能需要一些别的手段来实时得到端口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体配置部分已经有人写的很详细了。首先按照&lt;a href=&#34;https://www.procustodibus.com/blog/2020/11/wireguard-point-to-site-config/&#34;&gt;WireGuard Point to Site Configuration&lt;/a&gt;设置点到站点的连接，然后按照&lt;a href=&#34;https://github.com/heiher/natmap/wiki/wireguard&#34;&gt;natmap Wiki&lt;/a&gt;设置NATMap即可。注意，在路由器上操作的时候，一定要记得在防火墙中&lt;strong&gt;打开对应端口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;完成以上步骤之后，应该已经可以从移动网络访问内网的Wireguard Peer了。&lt;/p&gt;
&lt;h2 id=&#34;一点问题&#34;&gt;一点问题&lt;/h2&gt;
&lt;p&gt;由于运营商网关不受我们控制，外网的IP和端口号都是随机分配的，每当地址变化时，NATMap将执行自定义脚本。在上面的Wiki中，利用DDNS，把IPv4地址和端口编码进IPv6的AAAA记录中。这并不是一种标准的技术，不过既然&lt;code&gt;2001::&lt;/code&gt;就是给&lt;code&gt;teredo&lt;/code&gt;使用的，在这里随便用用也无所谓。&lt;/p&gt;
&lt;p&gt;对于Windows下的Wireguard客户端，我（和ChatGPT一起）写了一个&lt;a href=&#34;https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-wg-ps1&#34;&gt;PowerShell脚本&lt;/a&gt;，能够自动修改配置文件的&lt;code&gt;Endpoint&lt;/code&gt;并调用&lt;code&gt;wireguard.exe&lt;/code&gt;进行连接。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;a href=&#34;https://github.com/WireGuard/wireguard-windows/blob/master/docs/enterprise.md&#34;&gt;wireguard-windows&lt;/a&gt;，用客户端连接测试成功。&lt;/li&gt;
&lt;li&gt;在文件夹&lt;code&gt;C:\example&lt;/code&gt;下建立&lt;a href=&#34;https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-wg-ps1&#34;&gt;wg.ps1&lt;/a&gt;和&lt;a href=&#34;https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-nat-conf&#34;&gt;nat.conf&lt;/a&gt;，粘贴Gist内容。&lt;/li&gt;
&lt;li&gt;按照实际情况修改&lt;code&gt;nat.conf&lt;/code&gt;，以及&lt;code&gt;wg.ps1&lt;/code&gt;中&lt;code&gt;$Hostname&lt;/code&gt;部分。&lt;code&gt;Endpoint&lt;/code&gt;不必修改。&lt;/li&gt;
&lt;li&gt;以管理员身份运行&lt;code&gt;PowerShell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置&lt;code&gt;ps1&lt;/code&gt;脚本运行权限：&lt;code&gt;Set-ExecutionPolicy RemoteSigned&lt;/code&gt;（或Unrestricted）&lt;/li&gt;
&lt;li&gt;启动、重启Wireguard：&lt;code&gt;C:\example\wg.ps1 -up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止Wireguard：&lt;code&gt;C:\example\wg.ps1 -down&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Windows 11, Powershell  5.1.22621.963测试通过，也可以配合Windows下的&lt;a href=&#34;https://bjansen.github.io/scoop-apps/main/sudo/&#34;&gt;sudo&lt;/a&gt;使用。&lt;/p&gt;
&lt;p&gt;另外，在Android下，也可以用termux运行&lt;a href=&#34;https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-nm-echo-sh&#34;&gt;nm-echo.sh&lt;/a&gt;来获得IP地址，手动修改Wireguard官方客户端中的IP。甚至，可以使用你喜欢的代理客户端（比如NB4A），配置好Wireguard Outbond和路由就可以了~&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/%E8%BF%9E%E6%8E%A5%E6%97%B6%E9%97%B4.png&#34;
    alt=&#34;我这里最近一次分配的端口坚持了18天，所以应该不必时常刷新。&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;我这里最近一次分配的端口坚持了18天，所以应该不必时常刷新。&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;如果需要更为稳定的访问，可以参考&lt;a href=&#34;https://gist.github.com/z0mb1e-kgd/54aede86adf2e30e390dba13886d18e1&#34;&gt;reresolve-dns.ps1&lt;/a&gt;，这个脚本可以在上一次握手时间过久时刷新DNS，但是因为要添加计划任务，有一点过于复杂了。&lt;/p&gt;
&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Natmap的另一种用法是映射BT客户端，从而使外来连接能够主动发起连接，获得所谓的&lt;code&gt;High ID&lt;/code&gt;。见&lt;a href=&#34;https://github.com/wits-fe/bittorrent-NAT-hole-punching&#34;&gt;wits-fe/bittorrent-NAT-hole-punching&lt;/a&gt;。在PT站做种的时候应该会很有用。&lt;/p&gt;
&lt;h2 id=&#34;附性能测试&#34;&gt;附：性能测试&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;随便找了一个公共WiFi，用手机（一加7T）上Termux中的&lt;code&gt;iperf3&lt;/code&gt;测速。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于多层NAT的限制，Nebula类组网工具必须部署在路由器位置。可以看出，对路由器（万元级，K3）带来的压力还是比较大的。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/iperf-1.svg&#34;
    alt=&#34;WireGuard for Android&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;WireGuard for Android&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/iperf-2.svg&#34;
    alt=&#34;NB4A提供的Wireguard Outbound&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;NB4A提供的Wireguard Outbound&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/05/10/through-nat/iperf-3.svg&#34;
    alt=&#34;Nebula，对端部署在路由器上&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;Nebula，对端部署在路由器上&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;很难想象，对于访问内网这样一个简单的需求，我居然花费了如此多的精力。不过，这次应该算是当前比较满意的方案，应该能坚持到下次水逆开始。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>仅IPv6家庭内网服务实现v6&#43;v4双栈访问</title>
      <link>http://localhost:1313/2023/02/07/beyond-nat-2023/</link>
      <pubDate>Tue, 07 Feb 2023 17:29:00 +0800</pubDate>
      
      <guid>http://localhost:1313/2023/02/07/beyond-nat-2023/</guid>
      <description>&lt;p&gt;是的，连回家里NAS的正常手段，当然是ZeroTier/Tinc/OpenVPN之类。但是如果还有其他人想要看照片的话，不要期待手机上会有除了浏览器之外的东西。&lt;/p&gt;
&lt;p&gt;在这种场景，如果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有一台常开的NAS、矿渣或whatever，&lt;/li&gt;
&lt;li&gt;在Cloudflare上有一个自己的域名，&lt;/li&gt;
&lt;li&gt;家里的宽带有IPv6，而且防火墙可以自己控制（aka 光猫桥接），&lt;/li&gt;
&lt;li&gt;不想或者不能打开80、443端口，没办法直接使用Cloudflare代理；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么可以通过本文的方案，获得高位端口的CF代理。这样，在没有IPv6的地方也能够访问家里的服务了。&lt;/p&gt;
&lt;p&gt;如果上面的条件不满足的话，可以尝试&lt;code&gt;FRP&lt;/code&gt;和&lt;code&gt;Cloudflare Tunnel&lt;/code&gt;之类的东西。&lt;/p&gt;
&lt;h2 id=&#34;打开端口ddns&#34;&gt;打开端口、DDNS&lt;/h2&gt;
&lt;p&gt;首先我们需要保证NAS上的IPv6端口能从公网访问，并把域名指向家里的IPv6地址。打开端口的部分可以看看&lt;a href=&#34;http://localhost:1313/2021/07/20/beyond-nat/&#34;&gt;之前的博文&lt;/a&gt;；DDNS我在使用&lt;a href=&#34;https://github.com/jeessy2/ddns-go&#34;&gt;ddns-go&lt;/a&gt;（这里可能需要科学上网）。注意，此时先不要开启Cloudflare代理。&lt;/p&gt;
&lt;p&gt;完成这部分之后，我们的域名（比如说home.example.net）指向了家里的IP，并且防火墙打开了端口（比如38000）。可以在NAS上开个&lt;code&gt;python -m http.server 38000&lt;/code&gt;，并用移动网络测试一下。&lt;/p&gt;
&lt;p&gt;对了，Cloudflare的token不要扔，待会还有用。&lt;/p&gt;
&lt;h2 id=&#34;caddy&#34;&gt;Caddy&lt;/h2&gt;
&lt;p&gt;安装&lt;a href=&#34;https://caddyserver.com/download?package=github.com%2Fcaddy-dns%2Fcloudflare&#34;&gt;包含Cloudflare DNS插件的Caddy&lt;/a&gt;。因为家里没有80和443端口，所以需要用DNS-01方式申请TLS证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Caddyfile&#34; data-lang=&#34;Caddyfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;## cat /etc/caddy/Caddyfile
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;(cloudflare) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;tls&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;dns&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;cloudflare&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;abcdefgh&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; #刚才说的Cloudflare的token
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#030;font-weight:bold&#34;&gt;home.example.net:38000&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;reverse_proxy&lt;/span&gt; http://localhost:&lt;span style=&#34;color:#f60&#34;&gt;1234&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; #这里是内网服务的地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cloudflare&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; #申请证书的部分
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启Caddy。这里结束后，移动网络（就是有IPv6地址的网络）应该能够通过&lt;code&gt;https://home.example.net:38000&lt;/code&gt;访问服务了。&lt;/p&gt;
&lt;h2 id=&#34;cloudflare&#34;&gt;Cloudflare&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/02/07/beyond-nat-2023/SSL_TLS.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;把SSL/TLS加密模式改为完全；&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2023/02/07/beyond-nat-2023/Origin_Rules.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;添加Origin Rules，把请求转至高位端口；&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;开启Cloudflare代理。&lt;a href=&#34;https://github.com/jeessy2/ddns-go/issues/336&#34;&gt;在DDNS服务上也开启Cloudflare代理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;好了，大概就是这样。通过CF，也许自家的网络也能稍微安全一点。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>几物互联</title>
      <link>http://localhost:1313/2022/05/22/connect-every-something/</link>
      <pubDate>Sun, 22 May 2022 22:45:39 +0800</pubDate>
      
      <guid>http://localhost:1313/2022/05/22/connect-every-something/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;我被封在外面了。这种时候非常想念192.168.1.1……也非常适合写博客来回忆熟悉的网络。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无论是在家里的组装机还是漂泊的笔记本，在工作的时候都能够获得相似的上下文，有的时候甚至可以在家CTRL+C，在公司CTRL+V。除了&lt;em&gt;鸿蒙&lt;/em&gt;系统之外，通过一组软件也是可以实现的。&lt;/p&gt;
&lt;p&gt;本人现在所使用的方案如下。设置难度由易到难排序。&lt;/p&gt;
&lt;h2 id=&#34;同步存储syncthing&#34;&gt;同步存储：Syncthing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前置条件：两台（或以上）容量较高的电子设备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比起云存储，个人更倾向于Syncthing这样的本地同步方案：至少文件是属于自己的（而且还不用收钱）。安装也很简单：Windows下安装&lt;a href=&#34;https://github.com/canton7/SyncTrayzor&#34;&gt;SyncTrayzor&lt;/a&gt;，Android下安装&lt;a href=&#34;https://github.com/Catfriend1/syncthing-android&#34;&gt;Syncthing-Fork&lt;/a&gt;，其他系统移步&lt;a href=&#34;https://syncthing.net/downloads/&#34;&gt;这里&lt;/a&gt;就可以。安装完以后，在两边选择工作目录，就可以完成双向同步了。得益于STUN服务器，无论是在内网还是外网，文件都可以完成传输。&lt;/p&gt;
&lt;p&gt;当然，Syncthing也有一定的问题。首先是，因为是进行了同步，同一份文件会在每一个设备上都占用一份空间。在手机这样捉襟见肘的环境下，建议采用“仅发送”模式，只用来备份照片之类的。&lt;/p&gt;
&lt;p&gt;另外，Syncthing在运行的时候必须要两侧的设备保持开机，电费账单+1。在有一方离线的时候，需要注意文件的版本，不要在两边都修改同一个文件。毕竟不是git，合并功能没有那么强。&lt;/p&gt;
&lt;h2 id=&#34;笔记软件与文献管理&#34;&gt;笔记软件与文献管理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前置条件：同步的话需要Syncthing，或者云存储。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本人使用&lt;a href=&#34;https://joplinapp.org/&#34;&gt;Joplin&lt;/a&gt;和&lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt;来做笔记和进行文献管理，这两款软件都可以使用Syncthing作为同步后端&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，而且都具有笔记功能。我的习惯是，在Joplin上写一些需要较长篇幅的笔记，文献阅读笔记放在Zotero中。&lt;/p&gt;
&lt;p&gt;当然，作为一篇讲“互联”的博文，这两款软件当然也是可以相互连接的。我主要用到下面这些：&lt;/p&gt;
&lt;h3 id=&#34;joplin内部&#34;&gt;Joplin内部&lt;/h3&gt;
&lt;p&gt;当然Joplin不是为了双链笔记而设计的，但是通过插件&lt;a href=&#34;https://github.com/ylc395/joplin-plugin-note-link-system&#34;&gt;plugin-note-link-system&lt;/a&gt;也可以获得一部分双链笔记的功能，比如说，方便地在一篇笔记里引用另外一篇笔记的某个小标题；或者是在另一篇笔记里看到backlinks。&lt;/p&gt;
&lt;h3 id=&#34;笔记引用zotero参考文献&#34;&gt;笔记引用Zotero参考文献&lt;/h3&gt;
&lt;p&gt;通过&lt;a href=&#34;https://retorque.re/zotero-better-bibtex/&#34;&gt;Better BibTeX for Zotero&lt;/a&gt;的&lt;code&gt;Quick Copy&lt;/code&gt;功能，按下&lt;code&gt;Ctrl+Shift+C&lt;/code&gt;，就可以把当前文献复制成类似&lt;code&gt;[xxx](zotero://select/library/items/AAAAAA)&lt;/code&gt;的链接。这种方式对别的笔记软件也适用，只要它能够打开&lt;code&gt;URL Scheme&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果把链接改写为&lt;code&gt;zotero://open-pdf/library/items/AAAAAA?page=114&lt;/code&gt;，可以直接打开文件的第114页。
&lt;img src=&#34;p114.png&#34; alt=&#34;p114&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，Calibre也有类似的链接功能。我一般用Calibre来管理那些杂书。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;calibre.png&#34; alt=&#34;calibre&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;引用计算机上的其他内容&#34;&gt;引用计算机上的其他内容&lt;/h3&gt;
&lt;p&gt;肯定没有人想把所有文件都塞进笔记本的数据库里，总是要引用一些外部文件的，这时候还是需要用万能的链接。这里的链接格式类似&lt;code&gt;[xxx](file://C:\工作\xxx.docx)&lt;/code&gt;，在Windows系统下既有斜杠也有反斜杠，但是很神奇地能够正确找到。&lt;/p&gt;
&lt;p&gt;实际上还有一个问题，通过Syncthing同步后，文件在每台电脑上的链接地址是不一样的。所以，我在每台电脑的C盘做了一个文件夹链接&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。在Powershell下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;New-Item&lt;/span&gt; -ItemType Junction -Path &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C:\工作&amp;#34;&lt;/span&gt; -Target &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C:\实际的\工作\目录&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者也可以用&lt;a href=&#34;https://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html&#34;&gt;Link Shell Extension&lt;/a&gt;来做这件事。之后，在每台电脑上都可以访问&lt;code&gt;C:\工作\xxx.docx&lt;/code&gt;了。&lt;/p&gt;
&lt;h2 id=&#34;随处ctrlv以及传文件&#34;&gt;随处Ctrl+V，以及传文件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;是这样的张总：你在家里的电脑上按了CTRL+C,然后在公司的电脑上再按CTRL+V是肯定不行的。即使同一篇文章也不行。不不，多贵的电脑都不行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;前置条件：需要在同一个局域网下面——所以确实不行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;隆重推荐&lt;a href=&#34;https://binary-factory.kde.org/job/kdeconnect-kde_Release_win64/&#34;&gt;KDE connect&lt;/a&gt;，虽然是KDE出品，但是Windows和Android也能用。给手机和电脑装上这个，在同一个局域网下面就可以共享剪贴板了，而且还能够互相传文件。&lt;/p&gt;
&lt;p&gt;不过，有的时候KDE connect找不到局域网设备，这时候我会用Total Commander (Android)的Wifi传输插件，或者是&lt;code&gt;python -m http.server&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;远程访问tailscaletinc或wireguard&#34;&gt;远程访问：Tailscale、Tinc或Wireguard&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前置条件：家里24小时开机的矿渣/跳板机/树莓派/NAS；有公网IP的VPS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像&lt;a href=&#34;http://localhost:1313/2021/07/20/beyond-nat/&#34;&gt;之前&lt;/a&gt;所说的那样，当前，如果我想要在外面访问家里的局域网，我会使用Tinc来建立隧道。运气好（外面有IPv6地址，大多是手机分享Wifi）的时候，可以直接连到自己的、IPv6地址与某个域名绑定的“跳板机”（ARM矿渣）上；运气不好的话，会自动有一台国外VPS进行转发，速度大概在~100K/s。如果用Wireguard的话性能会更好，可是我一直没有找到像Tinc一样简单的节点转发方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来自2023年的更新：现在我用回&lt;a href=&#34;http://localhost:1313/2023/05/10/through-nat/&#34;&gt;Wireguard&lt;/a&gt;了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连接Tinc之后，就可以通过&lt;code&gt;Wake On LAN&lt;/code&gt;唤醒自己的其他电脑，然后用&lt;code&gt;samba&lt;/code&gt;、远程桌面之类的软件了。就好象回到家里&lt;del&gt;居家办公&lt;/del&gt;一样！&lt;/p&gt;
&lt;p&gt;当然，在这种需求下，最简单的应该是&lt;code&gt;Tailscale&lt;/code&gt;，但是由于迫害妄想，我一直没有尝试，而是另外找了类似的东西：&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
  &lt;h4 class=&#34;inline&#34;&gt;
    剧透：最后这些我都没用
  &lt;/h4&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/slackhq/nebula&#34;&gt;https://github.com/slackhq/nebula&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;无法通过公共节点转发&lt;/del&gt;现在可以了&lt;/li&gt;
&lt;li&gt;两个Android客户端在移动网络、甚至是同一个无线网络都无法连接，离谱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonarino/innernet&#34;&gt;https://github.com/tonarino/innernet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;只实现了STUN，没有实现TURN&lt;/li&gt;
&lt;li&gt;也无法通过公共节点转发&lt;/li&gt;
&lt;li&gt;无Android支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/juanfont/headscale&#34;&gt;https://github.com/juanfont/headscale&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;无Android支持&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gravitl/netmaker/&#34;&gt;https://github.com/gravitl/netmaker/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;构建需要docker和干净的服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/netbirdio/netbird&#34;&gt;https://github.com/netbirdio/netbird&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;无Android支持&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Wireguard客户端无法使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dswd/vpncloud&#34;&gt;vpncloud&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;只支持Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;p&gt;好了，这次我想说的就是这些。办公室冰冷的行军床正在等着我。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Joplin使用&lt;code&gt;File System&lt;/code&gt;作为同步目标，Zotero使用&lt;a href=&#34;http://zotfile.com/&#34;&gt;Zotfile&lt;/a&gt;插件。就我自己而言，Joplin用了OneDrive，在手机上同步比起SyncThing更方便一些；Zotero那边，我自建了WebDAV服务，这纯粹是因为那时候我还没找到插件。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;其实是&lt;a href=&#34;https://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html#junctions&#34;&gt;Junction&lt;/a&gt;，对于应用来说完全透明，两边的文件是完全一样的。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>你可能并不需要内网穿透</title>
      <link>http://localhost:1313/2021/07/20/beyond-nat/</link>
      <pubDate>Tue, 20 Jul 2021 17:03:31 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/07/20/beyond-nat/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近搬家了，互联网从联通变成了便宜一些的电信。于是，我失去了之前的公网IP&lt;code&gt;114.*.*.*&lt;/code&gt;，换来了&lt;code&gt;100.64.*.*&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。不过，IPv6地址仍然是&lt;code&gt;2404::****&lt;/code&gt;，这个应该也算是所谓的 &lt;em&gt;公网IP&lt;/em&gt; 吧？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;和安装网络的大叔说，我需要把光猫改成桥接模式，并保证“咱是专业的，不会弄坏网线，弄坏了也不会去投诉”；&lt;/li&gt;
&lt;li&gt;找一个稍微新一点的路由器，我用的是刷了&lt;code&gt;OpenWRT&lt;/code&gt;的，&lt;strong&gt;非常贵的&lt;/strong&gt;跑路K3；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://test-ipv6.com&#34;&gt;test-ipv6.com&lt;/a&gt;显示了IPv6地址而且没有给你打零分。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/20/beyond-nat/ipv6-test.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;比如这样&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;打开端口&#34;&gt;打开端口&lt;/h2&gt;
&lt;p&gt;虽然没有了NAT，但是防火墙还是必不可少的，毕竟在互联网上随意敞开自己的端口和裸奔没有什么区别。当然，稍微露出一点点的话没有什么问题，所以我开了几个五位数的端口，用来SSH。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/20/beyond-nat/ipv6-firewall.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;就像这样（图像经过处理，实际上有更多规则，而且端口也不是这几个）&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;如果对安全要求更高的话，可以参考&lt;a href=&#34;https://blog.ptsang.net/match-ipv6-dynamic-addresses-in-iptables?utm_source=pocket_mylist&#34;&gt;这里&lt;/a&gt;匹配IPv6地址的末几位，就像&lt;code&gt;::abcd:1234:5678:90ef/::ffff:ffff:ffff:ffff&lt;/code&gt;这样。&lt;/p&gt;
&lt;p&gt;在这个时候，你应该已经可以通过手机移动网络用SSH连接回自己主机的IPv6地址了。就和公网一模一样。&lt;/p&gt;
&lt;h2 id=&#34;绑定域名&#34;&gt;绑定域名&lt;/h2&gt;
&lt;p&gt;任何一个支持IPv6的AAAA地址绑定的DDNS服务都可以。我家里恰好有一个长期开机的矿渣&lt;code&gt;贝壳云&lt;/code&gt;，是某次水逆之后想要买树莓派四，忍住了却又没有完全忍住的结果；之前写的&lt;a href=&#34;http://localhost:1313/2018/07/05/cloudflare-ddns/&#34;&gt;cloudflare脚本&lt;/a&gt;刚好能用。&lt;/p&gt;
&lt;h2 id=&#34;跳板机自称&#34;&gt;跳板机（自称）&lt;/h2&gt;
&lt;p&gt;如果想对内网完全控制，而不是仅仅几个端口的话，可能需要所谓跳板机的配合。仔细想想，这是一个跨越&lt;code&gt;防火墙.little&lt;/code&gt;的活动，对付&lt;code&gt;防火墙 the Great&lt;/code&gt;的软件也完全适用。所以我在内网设备（aka矿渣）上部署了某个V开头的软件，通过Android客户端连回家里完全没有问题&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;如果外面的Windows想要进来的话，我现在用的是已经跑路的&lt;code&gt;SocksCap64&lt;/code&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。把&lt;code&gt;MSTSC.exe&lt;/code&gt;加到列表里，就可以愉快地远程桌面了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来自210805的更新：后来我按照&lt;a href=&#34;https://chanix.github.io/TincCookbook/introduction/&#34;&gt;这篇教程&lt;/a&gt;在矿渣上部署了tinc，并且增加了&lt;a href=&#34;https://tinc-vpn.org/examples/proxy-arp/&#34;&gt;ARP代理&lt;/a&gt;用来访问内网。我又不能直接把家里的老光猫换掉……&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;用于在电信级NAT环境中服务提供商与其用户通信，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BF%9D%E7%95%99IP%E5%9C%B0%E5%9D%80&#34;&gt;维基百科&lt;/a&gt;上说的。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;记住客户端不要&lt;code&gt;绕过局域网地址&lt;/code&gt;，我们用的就是局域网。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;TODO：急求一款没有跑路的、免费的、Windows下的全局代理软件。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>