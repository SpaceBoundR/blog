<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 电子荒原</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on 电子荒原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy;召唤兽，&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 21 Jul 2021 18:14:49 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/python/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python与光学计算，2021</title>
      <link>http://localhost:1313/2021/07/21/python-for-optics-in-2021/</link>
      <pubDate>Wed, 21 Jul 2021 18:14:49 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/07/21/python-for-optics-in-2021/</guid>
      <description>&lt;p&gt;本文是&lt;a href=&#34;http://localhost:1313/2019/08/04/python-for-optics/&#34;&gt;2019年同名博文&lt;/a&gt;的更新版本。就像在那里说的，光学计算是一个非常宽泛的话题，把所有的库放在一起，倒是具有一种&lt;ruby&gt;全栈&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;full-stack&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;工程师的气质，可是好像很容易造成&lt;em&gt;Stack Overflow&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;这次，我尝试对这些代码进行简单的分类。因为我不属于&lt;em&gt;光学前端工程师&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，也不属于&lt;em&gt;光学后端工程师&lt;/em&gt;&lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，而更像是&lt;em&gt;光学系统运维&lt;/em&gt;&lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，分类得大概并不算准确。&lt;/p&gt;
&lt;h2 id=&#34;物理光学演示lightpipes&#34;&gt;物理光学演示：LightPipes&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/lightpipes.png&#34; width=&#34;50%&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;正像我之前说的那样，我使用&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;opticspy/lightpipes&lt;/a&gt;完成了一部分激光物理过程的模拟，这个库大体上能够满足我当时的要求。但是要注意的是，个人感觉这个库是为了物理实验、教学演示而设计的，揭示原理的部分多于实际计算的部分，而且计算是序列化的。或许把它理解成类似&lt;a href=&#34;https://phet.colorado.edu/zh_CN/simulations/filter?subjects=physics&amp;amp;type=html&#34;&gt;虚拟物理实验室&lt;/a&gt;更好？&lt;/p&gt;
&lt;p&gt;不过如果能力足够的话，大概能在上面实现一些比较复杂的功能。&lt;del&gt;而且话又说回来，真正有一些严肃需求的人，早就去求助一些商业软件了。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;光线追迹ray-tracing&#34;&gt;光线追迹（Ray Tracing）&lt;/h2&gt;
&lt;p&gt;在上次的博文里，在光线追迹方面，我曾经介绍过&lt;a href=&#34;https://github.com/Sterncat/opticspy&#34;&gt;Sterncat/opticspy&lt;/a&gt;，&lt;a href=&#34;https://github.com/quartiq/rayopt&#34;&gt;RayOpt&lt;/a&gt;和&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;cihologramas/pyoptools&lt;/a&gt;，其中，前两组大概已经停止更新了，反而&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;pyoptools&lt;/a&gt;看起来处于活跃开发的阶段。另外，这次我还看到了三个新鲜面孔：&lt;a href=&#34;https://github.com/mjhoptics/ray-optics&#34;&gt;mjhoptics/ray-optics&lt;/a&gt;、&lt;a href=&#34;https://salsa.debian.org/mess42/pyrate/&#34;&gt;mess42/pyrate&lt;/a&gt;和&lt;a href=&#34;https://github.com/bryancole/raypier_optics&#34;&gt;bryancole/raypier_optics&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ray-optics&#34;&gt;ray-optics&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/rayoptics.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;ray-optics的Qt界面&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;序列化&lt;/em&gt;的光线追迹，或成像光学，完成度很高，甚至自带一个类似Zemax的界面。在其&lt;a href=&#34;https://ray-optics.readthedocs.io/en/latest/Introduction.html&#34;&gt;手册&lt;/a&gt;上提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rethink how image forming optical calculations are done absent historical constraints on computer speed and memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我学不会光学设计肯定是因为软件历史包袱太重，嗯。&lt;/p&gt;
&lt;h3 id=&#34;raypier&#34;&gt;Raypier&lt;/h3&gt;
&lt;p&gt;非序列的光学追迹，在几何光学传输的基础上增加了一部分高斯光束和衍射效应，并且可以（通过VTK）生成一些漂亮的三维模型。（之后我一定要想办法成功安装……）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raypier-optics.readthedocs.io/en/latest/&#34;&gt;文档&lt;/a&gt;在这里。&lt;/p&gt;
&lt;h3 id=&#34;pyrate&#34;&gt;pyrate&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/pyrate_in_freecad.png&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;正在写这篇博文的时候，我发现了这一套&lt;a href=&#34;https://salsa.debian.org/mess42/pyrate/&#34;&gt;代码&lt;/a&gt;，似乎可以与FreeCAD互动，但是更具体的功能和特性还没有仔细看。毕竟我还没找到文档在哪里……&lt;/p&gt;
&lt;h3 id=&#34;pyoptools&#34;&gt;pyoptools&lt;/h3&gt;
&lt;p&gt;大概还在紧张地开发之中，等&lt;a href=&#34;https://pyoptools.readthedocs.io/en/latest/raytrace.html&#34;&gt;文档&lt;/a&gt;写好之后我会再回来看看的。&lt;/p&gt;
&lt;h3 id=&#34;另ricktu288ray-opticshttpsgithubcomricktu288ray-optics&#34;&gt;另：&lt;a href=&#34;https://github.com/ricktu288/ray-optics&#34;&gt;ricktu288/ray-optics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当然不是用Python编写的，但是谁不喜欢&lt;a href=&#34;https://ricktu288.github.io/ray-optics/&#34;&gt;开箱即用&lt;/a&gt;的玩具呢？&lt;/p&gt;
&lt;h3 id=&#34;另beam4httpswwwstellarsoftwarecom及其他&#34;&gt;另：&lt;a href=&#34;https://www.stellarsoftware.com/&#34;&gt;Beam4&lt;/a&gt;及其他&lt;/h3&gt;
&lt;p&gt;也许代码就像蘑菇一样，找到一个又有另外两个出来。Beam4是用Java编写的，但看起来成熟度比这里的很多库高得多，比如将要提到的两个。&lt;/p&gt;
&lt;p&gt;我把&lt;a href=&#34;https://github.com/GNiendorf/tracepy&#34;&gt;tracepy&lt;/a&gt;、&lt;a href=&#34;https://github.com/kunguz/odak&#34;&gt;odak&lt;/a&gt;和&lt;a href=&#34;https://github.com/optcom-org/optcom&#34;&gt;optcom&lt;/a&gt;列在这里，只是为了之后不要重新发现它们了。求求你们好好写写文档吧……&lt;/p&gt;
&lt;h2 id=&#34;光学设计为望远镜日冕仪准备的python&#34;&gt;光学设计：为望远镜/日冕仪准备的Python&lt;/h2&gt;
&lt;p&gt;你想学习怎样设计日冕仪吗？&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/poppy.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;詹姆斯·韦伯空间望远镜的光学设计，来自poppy&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;就像所有的专业软件一样，如果你理解了整个物理过程，中间的示意图就并不是那么重要了。这样的库包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brandondube/prysm&#34;&gt;brandondube/prysm&lt;/a&gt; (&lt;a href=&#34;https://prysm.readthedocs.io/en/stable/examples/index.html&#34;&gt;examples&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spacetelescope/poppy&#34;&gt;spacetelescope/poppy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ajeldorado/falco-python&#34;&gt;ajeldorado/falco-python&lt;/a&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ehpor/hcipy&#34;&gt;ehpor/hcipy&lt;/a&gt; (&lt;a href=&#34;https://docs.hcipy.org/dev/tutorials/index.html&#34;&gt;examples&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等。&lt;/p&gt;
&lt;p&gt;它们大概都能够计算光学系统的点扩散函数（PSF）、调制传递函数（MTF）、点列图之类的，而优化算法似乎欠奉&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。如果你对上面的一系列名词不大了解的话，建议和我一起补习&lt;a href=&#34;http://www.optzmx.com/forum.php?mod=viewthread&amp;amp;tid=1131&amp;amp;highlight=%B9%E2%D1%A7%CF%B5%CD%B3&#34;&gt;《光学系统设计》&lt;/a&gt;。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/know-everything.jpg&#34;
    alt=&#34;我逐渐理解一切&#34; width=&#34;30%&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;这些库的对比可以看&lt;a href=&#34;https://arxiv.org/abs/1807.07042&#34;&gt;这里&lt;/a&gt;。&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;如果你真的想设计日冕仪的话也可以读一读这篇文献，那里对设计方法也有一些介绍。&lt;/p&gt;
&lt;p&gt;就我而言，我比较喜欢&lt;code&gt;HCIPy&lt;/code&gt;，至少这里面还包含一些传递过程的内容，不至于直接跳到结论，和上个部分的库们更加接近一些。&lt;/p&gt;
&lt;h2 id=&#34;另一类光线追迹&#34;&gt;另一类光线追迹&lt;/h2&gt;
&lt;p&gt;这种的主要目的是为了让自己的文章显得更好看，所以我就直接放两张图：&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/raysect.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Raysect生成的，就好像杂志封面一样&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/inkscape_ray_tracing.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;光线追迹——用inkscape更简单的画图方式&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;三维：&lt;a href=&#34;https://github.com/raysect/source&#34;&gt;Raysect&lt;/a&gt;，或者也可以用Blender+&lt;a href=&#34;https://github.com/CodeFHD/OptiCore&#34;&gt;OptiCore&lt;/a&gt;+&lt;a href=&#34;https://github.com/LuxCoreRender/LuxCore&#34;&gt;LuxCore&lt;/a&gt;（&lt;a href=&#34;https://www.youtube.com/watch?v=3hln88ukiZI&#34;&gt;youtube&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;二维：&lt;a href=&#34;https://github.com/damienBloch/inkscape-raytracing&#34;&gt;inkscape-raytracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;电磁场级别的仿真&#34;&gt;电磁场级别的仿真&lt;/h2&gt;
&lt;p&gt;无论是用EME法求解模式的&lt;a href=&#34;https://github.com/demisjohn/CAMFR&#34;&gt;CAMFR&lt;/a&gt;，还是用FDTD法计算电磁场的&lt;a href=&#34;https://github.com/NanoComp/meep&#34;&gt;meep&lt;/a&gt;，都远远超出了我的能力，请有识之士自行判断。&lt;/p&gt;
&lt;h2 id=&#34;激光谐振腔的简单计算&#34;&gt;激光谐振腔的简单计算&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;www.rezonator.orion-project.org&#34;&gt;rezonator&lt;/a&gt;、&lt;a href=&#34;https://github.com/simcav/simcav&#34;&gt;simcav/simcav&lt;/a&gt;等，或许过于简单了，可能LightPipes能做的事情还要更多一些。&lt;/p&gt;
&lt;h2 id=&#34;大气光谱学&#34;&gt;大气光谱学&lt;/h2&gt;
&lt;p&gt;请移步&lt;a href=&#34;https://github.com/erwanp/awesome-spectra#atmospheric-spectra&#34;&gt;这里&lt;/a&gt;和&lt;a href=&#34;https://www.researchgate.net/publication/333046820_Py4CAtS-PYthon_for_Computational_ATmospheric_Spectroscopy&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;pynlo.png&#34; alt=&#34;pyNLO&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pyNLO/PyNLO&#34;&gt;PyNLO&lt;/a&gt;：与非线性光学有关，大概是&lt;code&gt;SNLO&lt;/code&gt;的某种代替品。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jomiri/pyfiberamp&#34;&gt;Jomiri/pyfiberamp&lt;/a&gt;：有关掺Er光纤激光器的计算。没有什么用处。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AOtools/soapy&#34;&gt;AOtools/soapy&lt;/a&gt;：用于自适应光学过程的模拟，另有一组&lt;a href=&#34;https://github.com/AOtools/aotools&#34;&gt;用于分析&lt;/a&gt;的库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gwoptics.org/finesse/&#34;&gt;Finesse and PyKat&lt;/a&gt;：为了LIGO设计的语言，用于引力波探测器的光路设计。这次我依旧没有看懂。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aps.anl.gov/Science/Scientific-Software/OASYS&#34;&gt;OASYS&lt;/a&gt;：如果X射线也是光的话，那么&lt;a href=&#34;https://github.com/oasys-kit/wofry&#34;&gt;WOFRY&lt;/a&gt;也是光学计算。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scottprahl/laserbeamsize&#34;&gt;laserbeamsize&lt;/a&gt;：一个完善的激光光斑直径和$M^2$计算库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之祝大家好运吧。如果有条件的话，还是尽量使用商业软件。Seriously.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;据我了解并不存在前两种职业。而运维在哪里都存在。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;感觉这些既会光学又会Python的人，在起名字方面都没有什么创意。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;A J Eldorado Riggs, Garreth Ruane, Erkin Sidick, Carl Coker, Brian D. Kern, Stuart B. Shaklan, &amp;quot;Fast linearized coronagraph optimizer (FALCO) I: a software toolbox for rapid coronagraphic design and wavefront correction,&amp;quot; Proc. SPIE 10698, Space Telescopes and Instrumentation 2018: Optical, Infrared, and Millimeter Wave, 106982V (9 August 2018); &lt;a href=&#34;https://doi.org/10.1117/12.2313812&#34;&gt;https://doi.org/10.1117/12.2313812&lt;/a&gt;，&lt;a href=&#34;https://core.ac.uk/download/pdf/211386255.pdf&#34;&gt;PDF文件&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;如果尝试优化的话，可以看看&lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0030402618315821&#34;&gt;doi:10.1016/j.ijleo.2018.10.073&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Ruane, G., “Review of high-contrast imaging systems for current and future ground- and space-based telescopes I: coronagraph design methods and optical performance metrics”, in &lt;i&gt;Space Telescopes and Instrumentation 2018: Optical, Infrared, and Millimeter Wave&lt;/i&gt;, 2018, vol. 10698. doi:10.1117/12.2312948.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python中光学计算相关的库/Awesome Python for Optics</title>
      <link>http://localhost:1313/2019/08/04/python-for-optics/</link>
      <pubDate>Sun, 04 Aug 2019 20:03:49 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/04/python-for-optics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;来自2021-07-24的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文的2021年版本在&lt;a href=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是2019年的原文。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这大概是本博客第一次涉及博主在现实世界中的本职工作，大概算是一个好的开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在光学设计及模拟的领域，商业软件，比如Zemax/Code V、LASCAD、GLAD等，提供了较为完整的解决方案，对于较为前沿的领域，国内研究的事实标准是，通过MATLAB自行编写可靠性和可维护性都存在较大问题的脚本。但是，对于一些&lt;del&gt;研究经费不足同时工作量不饱和的&lt;/del&gt;课题组，了解这个古老的学科与当今流行语言的交集，可能也具有一定的意义。&lt;/p&gt;
&lt;p&gt;TL; DR：光学计算是一个很宽泛的话题，针对我的要求，之后我大概会试试&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;LightPipes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;以下是我找到的一些库的对比。&lt;/p&gt;
&lt;h2 id=&#34;spacetelescopepoppyhttpsgithubcomspacetelescopepoppy&#34;&gt;&lt;a href=&#34;https://github.com/spacetelescope/poppy&#34;&gt;spacetelescope/poppy&lt;/a&gt;&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2019/08/04/python-for-optics/poppy.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;这个库本身是为詹姆斯·韦伯空间望远镜的模拟而设计的，从其&lt;a href=&#34;https://nbviewer.jupyter.org/github/spacetelescope/poppy/blob/master/notebooks/POPPY_tutorial.ipynb&#34;&gt;tutorial&lt;/a&gt;也可以看出，这个库的主要目的大概是，在衍射明显的条件下模拟成像过程、计算点扩散函数并分析成像质量，特别是针对天文望远镜领域。&lt;/p&gt;
&lt;p&gt;因为我并不真正 &lt;em&gt;理解&lt;/em&gt; 光学成像，我并没有办法判断该库的潜在用途，不过在激光器设计方面该库可能并不适用。&lt;/p&gt;
&lt;h2 id=&#34;sterncatopticspyhttpsgithubcomsterncatopticspy&#34;&gt;&lt;a href=&#34;https://github.com/Sterncat/opticspy&#34;&gt;Sterncat/opticspy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;opticspy.png&#34; alt=&#34;opticspy&#34;&gt;&lt;/p&gt;
&lt;p&gt;看起来，这个库主要用于镜片设计，类似Zemax/Code V等软件所做的那样。具体上，能够完成光线追迹（但是没说能够优化），利用泽尼克多项式拟合（透镜表面/波前？），并计算镜片表面的干涉条纹。下次如果要计算纯粹干涉方面的内容我可能会尝试一下这个。&lt;/p&gt;
&lt;p&gt;另外，这个库散发着一种爱好者的气息，&lt;code&gt;施工中&lt;/code&gt;标志散落在文档各处。&lt;del&gt;对于这种类型的项目可能还是让企业来做比较合适；可是开源之后又赚不到钱。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;nanocompmeephttpsgithubcomnanocompmeep&#34;&gt;&lt;a href=&#34;https://github.com/NanoComp/meep&#34;&gt;NanoComp/meep&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;meep.png&#34; alt=&#34;meep&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-difference_time-domain_method&#34;&gt;FDTD&lt;/a&gt;法计算电磁场。这玩意让我想起了我短暂的研究生岁月，那时我学到一件事……人的能力是有极限的。&lt;/p&gt;
&lt;p&gt;下一个。&lt;/p&gt;
&lt;h2 id=&#34;sympyhttpsdocssympyorglatestmodulesphysicsopticsindexhtml&#34;&gt;&lt;a href=&#34;https://docs.sympy.org/latest/modules/physics/optics/index.html&#34;&gt;SymPy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SciPy的一个组成部分，拥有一个光学计算模块，但仅仅在代入公式的水平。嗯，如果只是要算算高斯光的传输矩阵什么的，问题应该不大。&lt;/p&gt;
&lt;h2 id=&#34;cihologramaspyoptoolshttpsgithubcomcihologramaspyoptools&#34;&gt;&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;cihologramas/pyoptools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大概也是Ray Trace，大概也是个人作品，而且例子都是用一种我看不懂的语言写的。下一个。&lt;/p&gt;
&lt;h2 id=&#34;rezonatorwwwrezonatororion-projectorgsimcavsimcavhttpsgithubcomsimcavsimcav等&#34;&gt;&lt;a href=&#34;www.rezonator.orion-project.org&#34;&gt;rezonator&lt;/a&gt;、&lt;a href=&#34;https://github.com/simcav/simcav&#34;&gt;simcav/simcav&lt;/a&gt;等&lt;/h2&gt;
&lt;p&gt;Rezonator其实不能算是Python库，不过倒也是免费的，而且做的比另一个程序更完整一些。这两个软件的功能比较类似，仅通过谐振腔传输矩阵计算激光谐振腔特性，对于简单的腔形，可能这个就足够了。&lt;/p&gt;
&lt;h2 id=&#34;opticspylightpipeshttpsgithubcomopticspylightpipes&#34;&gt;&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;opticspy/lightpipes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;lightpipes.png&#34; alt=&#34;lightpipes&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后我找到的是这个，它的&lt;a href=&#34;http://www.okotech.com/lightpipes&#34;&gt;官网&lt;/a&gt;上说，这本来是一个*nix下的C++库，1999年开源，并增加了免费Python接口——听起来很靠谱。
具体上来说，这玩意也包含几何光学和衍射光学的相关内容，而且在它的说明文档里直接体现了&lt;a href=&#34;https://github.com/opticspy/Optics/blob/master/GeometricOptics/resonator_geometric_optics.ipynb&#34;&gt;高斯光谐振腔矩阵计算&lt;/a&gt;和&lt;a href=&#34;https://opticspy.github.io/lightpipes/examples_of_lightpipes_for_python.html#laser-examples&#34;&gt;强衍射条件下谐振腔的计算&lt;/a&gt;（虽然我还没有看懂）。&lt;/p&gt;
&lt;p&gt;之后，可能会在这个的基础上对激光器进行一些分析——如果计划没有变更的话。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;来自2019-10-23的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;finesse-and-pykathttpwwwgwopticsorgfinesse&#34;&gt;&lt;a href=&#34;http://www.gwoptics.org/finesse/&#34;&gt;Finesse and PyKat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了LIGO设计的语言，用于引力波探测器的光路设计。Finesse有一种十分简单而复古的语法，而&lt;a href=&#34;http://www.gwoptics.org/pykat&#34;&gt;PyKat&lt;/a&gt;与其说是它的 &lt;em&gt;封装&lt;/em&gt; ，倒不如说是拿报纸包了一下。&lt;/p&gt;
&lt;p&gt;当然，该程序的功能还是挺强大的，甚至还有一些量子光学的内容&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。如果有人想要尝试的话，可以从&lt;a href=&#34;http://www.gwoptics.org/learn/&#34;&gt;这里&lt;/a&gt;开始。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;来自2020-6-1的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;rayopthttpsgithubcomquartiqrayopt&#34;&gt;&lt;a href=&#34;https://github.com/quartiq/rayopt&#34;&gt;RayOpt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;rayopt.png&#34; alt=&#34;rayopt&#34;&gt;
&lt;img src=&#34;rayopt2.png&#34; alt=&#34;rayopt&#34;&gt;&lt;/p&gt;
&lt;p&gt;和&lt;a href=&#34;#sterncatopticspyhttpsgithubcomsterncatopticspy&#34;&gt;opticspy&lt;/a&gt;一样，RayOpt也是一组用于代替Zemax的程序，&lt;strong&gt;看起来&lt;/strong&gt;更不像一个玩具。当然，如果要对这样的库作出一个中肯的评价，我觉得至少还要学习十年左右。所以我只是把它列在这里，并且祝&lt;em&gt;路过的旅行者&lt;/em&gt;好运。&lt;/p&gt;
&lt;p&gt;另外，我下次更新这篇文章的时候，差不多要给它们分分类了。毕竟光学计算是一个很宽泛的话题。&lt;del&gt;我先立一个flag在这里。&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;比如&lt;a href=&#34;http://www.gwoptics.org/finesse/reference/&#34;&gt;语法说明&lt;/a&gt;里提到了squeezed vacuum input source。不要问我&lt;a href=&#34;https://en.wikipedia.org/wiki/Squeezed_coherent_state&#34;&gt;那是什么&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>关于那个IME helper</title>
      <link>http://localhost:1313/2017/09/06/gossip_about_ime_helper/</link>
      <pubDate>Wed, 06 Sep 2017 19:46:55 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/09/06/gossip_about_ime_helper/</guid>
      <description>&lt;p&gt;&lt;del&gt;昨天&lt;/del&gt;前天我用鸟语写了一篇贼 &lt;em&gt;正经&lt;/em&gt; 的&lt;a href=&#34;http://localhost:1313/2017/09/05/atom-vim-mode-auto-switch-ime/&#34;&gt;说明&lt;/a&gt;，今天，我准备稍微介绍一下那里面的&lt;code&gt;IME helper&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;正如之前所说，那东西是为了配合atom插件自动开关输入法用的。问题明确、思路清晰，google一下肯定有人做过……才怪呢&lt;/p&gt;
&lt;p&gt;嗯，这种需求，我听过一个叫AHK的语言……&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;来自https://github.com/lspcieee/lspcieee_ahk/blob/master/IME.ahk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;没有任何要黑别人的意思，将来报道出了偏差，你们（下略）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setChineseLayout(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	;发送中文输入法切换快捷键，请根据实际情况设置。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	send {Ctrl Down}{Shift}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	send {Ctrl Down},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	send {Ctrl Down}{Shift}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	send {Ctrl Down},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	send {Ctrl Up}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;哇这语言真的是发送快捷键的哦！就没有什么更高级的方法吗？快捷键在win10里可是改了啊( &amp;gt;﹏&amp;lt;。)&lt;/p&gt;
&lt;p&gt;然后就愉快地决定用 Python+ctypes 干这种脏活了，然后发现：windows API真是太难写了！一个更改输入法有4种写法！而且都不能用！&lt;/p&gt;
&lt;p&gt;最后居然还是抄的&lt;a href=&#34;http://www.ahk8.com/thread-3751.html?highlight=%E8%BE%93%E5%85%A5%E6%B3%95&#34;&gt;AHK社区的东西&lt;/a&gt;……亏我还像白痴一样疯狂翻MSDN……&lt;/p&gt;
&lt;p&gt;另外，pyinstaller生成的单文件exe&lt;del&gt;跑得不够快&lt;/del&gt;用起来有延迟，大概是因为解压吧……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto-Switch IME in Vim-Mode-Plus for Atom Editor</title>
      <link>http://localhost:1313/2017/09/05/atom-vim-mode-auto-switch-ime/</link>
      <pubDate>Tue, 05 Sep 2017 21:03:41 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/09/05/atom-vim-mode-auto-switch-ime/</guid>
      <description>&lt;p&gt;Update 2018-5: Now vim-mode-plus introduced &lt;a href=&#34;https://github.com/t9md/atom-vim-mode-plus/blob/master/CHANGELOG.md#1300&#34;&gt;new method&lt;/a&gt; to disable IME in the setting page. It&#39;s time for this post to retire.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As a vim-user and Chinese-speaker, I prefer &lt;a href=&#34;https://atom.io/packages/vim-mode-plus&#34;&gt;vim-mode-plus&lt;/a&gt; for Atom editor, but always disrupted by the IME in normal mode, like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/IME-in-atom.png&#34; alt=&#34;IME-in-atom&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we could &lt;a href=&#34;https://github.com/t9md/atom-vim-mode-plus/issues/446&#34;&gt;disable IMEs in normal mode&lt;/a&gt; then everything will be fine again. However, due to &lt;a href=&#34;https://github.com/atom/atom/issues/1092&#34;&gt;the lack of the APIs&lt;/a&gt;, it is hardly possible to solve the problem in the editor.&lt;/p&gt;
&lt;p&gt;Thus, we could solve it &lt;em&gt;out of the box&lt;/em&gt;. There is a package named &lt;a href=&#34;https://atom.io/packages/vim-mode-plus-auto-ime&#34;&gt;atom-vim-mode-plus-auto-ime&lt;/a&gt;, which could run a custom command when the mode changes. The goal now is to find some commands to control the IME:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS users can use &lt;a href=&#34;https://github.com/vovkasm/input-source-switcher&#34;&gt;input-source-switcher&lt;/a&gt; to toogle the IME.&lt;/li&gt;
&lt;li&gt;For Linux, the IME &lt;code&gt;fcitx&lt;/code&gt; has a command &lt;code&gt;fcitx-remote&lt;/code&gt; to control itself.&lt;/li&gt;
&lt;li&gt;And for Windows, I wrote a &lt;a href=&#34;https://github.com/heyeshuang/ime_helper&#34;&gt;python script&lt;/a&gt; to switch the IME of the &lt;em&gt;foreground window&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we could configure this package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#windows:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python E:&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;path&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;to&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;ime_helper.py --current &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get Current Input Source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python E:&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;path&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;to&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;ime_helper.py --dec &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#insert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python E:&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;path&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;to&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;ime_helper.py --locale en_US &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python E:&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;path&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;to&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;ime_helper.py --locale en_US &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#visual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#linux:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/fcitx-remote &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get Current Input Source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;((&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;then&lt;/span&gt; /usr/bin/fcitx-remote -c; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; /usr/bin/fcitx-remote -o ;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;fi&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#insert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/fcitx-remote -c &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/fcitx-remote -c &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#visual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#macOS: just use the default config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/atom-vim-configure.png&#34; alt=&#34;configure&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flask似乎不错</title>
      <link>http://localhost:1313/2012/09/11/flask%E4%BC%BC%E4%B9%8E%E4%B8%8D%E9%94%99/</link>
      <pubDate>Tue, 11 Sep 2012 15:30:08 +0000</pubDate>
      
      <guid>http://localhost:1313/2012/09/11/flask%E4%BC%BC%E4%B9%8E%E4%B8%8D%E9%94%99/</guid>
      <description>&lt;p&gt;首先接触的web框架是karrigell，也最后作出了点东西，感觉简单实用但是好像有点非主流。然后看到Django好像很流行，然后就在openshift上弄了一个，最终结果是只用到了statics目录。中间因为搭wordpress，曾经有一段学php的热情。后来……冷掉了。&lt;/p&gt;
&lt;p&gt;然后下一个目标是flask。&lt;/p&gt;
&lt;p&gt;不过没有内容，什么都白搭。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>phpwind论坛刷分脚本（可用于openwrt）</title>
      <link>http://localhost:1313/2012/09/11/phpwind%E8%AE%BA%E5%9D%9B%E5%88%B7%E5%88%86%E8%84%9A%E6%9C%AC%EF%BC%88%E5%8F%AF%E7%94%A8%E4%BA%8Eopenwrt%EF%BC%89/</link>
      <pubDate>Tue, 11 Sep 2012 04:56:26 +0000</pubDate>
      
      <guid>http://localhost:1313/2012/09/11/phpwind%E8%AE%BA%E5%9D%9B%E5%88%B7%E5%88%86%E8%84%9A%E6%9C%AC%EF%BC%88%E5%8F%AF%E7%94%A8%E4%BA%8Eopenwrt%EF%BC%89/</guid>
      <description>&lt;p&gt;用Python2写成，为什么不用Lua？因为我不会&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
Created on 2012-9-10
@author: hh
&#39;&#39;&#39;
import cookielib
import urllib2
import urllib
import time
username=&amp;quot;Chetter.Hummin&amp;quot;
password=&amp;quot;password&amp;quot;
def login(usr, pwd):
    &#39;login function&#39;
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    opener.addheaders = [(&#39;User-agent&#39;,&#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&#39;)]
    url_login = &#39;http://bbs.sarabalst.com/2b/login.php&#39;
    body={&amp;quot;step&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;pwuser&amp;quot;:usr,&amp;quot;cktime&amp;quot;:&amp;quot;31536000&amp;quot;,&amp;quot;pwpwd&amp;quot;:pwd,&amp;quot;lgt&amp;quot;:&amp;quot;0&amp;quot;}
    print &#39;login to get cookies&#39;
    urllib2.install_opener(opener)
    req = urllib2.Request(url_login,urllib.urlencode(body))
    resp = urllib2.urlopen(req)
    #print (resp.read())

if __name__ == &#39;__main__&#39;:
    login(username,password)
    print &amp;quot;login success&amp;quot;
    print (time.strftime(&#39;%Y-%m-%d %H:%M&#39;,time.localtime(time.time())))
    for i in range(0,23):
        try:
            str=urllib2.urlopen(&amp;quot;http://bbs.sarabalst.com/2b/&amp;quot;,timeout=100).read()
            #print &amp;quot;success&amp;quot;
        except:
            str=&amp;quot;&amp;quot;
            #print &amp;quot;fail&amp;quot;
        if str!=&amp;quot;&amp;quot;:
            print str
            print &amp;quot;refresh success&amp;quot;
        else:
            print &amp;quot;refresh fail&amp;quot;
        print (time.strftime(&#39;%Y-%m-%d %H:%M&#39;,time.localtime(time.time())))
        time.sleep(300);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在openwrt上测试成功。理论上可以加入crontab，现在还没测试（时间不够）&lt;br&gt;
update :鉴于论坛和路由器双重不给力，给urllib2设了超时&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>