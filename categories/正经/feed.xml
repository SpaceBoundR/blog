<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正经 on 电子荒原</title>
    <link>http://localhost:1313/categories/%E6%AD%A3%E7%BB%8F/</link>
    <description>Recent content in 正经 on 电子荒原</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy;召唤兽，&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 21 Jul 2021 18:14:49 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/%E6%AD%A3%E7%BB%8F/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python与光学计算，2021</title>
      <link>http://localhost:1313/2021/07/21/python-for-optics-in-2021/</link>
      <pubDate>Wed, 21 Jul 2021 18:14:49 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/07/21/python-for-optics-in-2021/</guid>
      <description>&lt;p&gt;本文是&lt;a href=&#34;http://localhost:1313/2019/08/04/python-for-optics/&#34;&gt;2019年同名博文&lt;/a&gt;的更新版本。就像在那里说的，光学计算是一个非常宽泛的话题，把所有的库放在一起，倒是具有一种&lt;ruby&gt;全栈&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;full-stack&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;工程师的气质，可是好像很容易造成&lt;em&gt;Stack Overflow&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;这次，我尝试对这些代码进行简单的分类。因为我不属于&lt;em&gt;光学前端工程师&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，也不属于&lt;em&gt;光学后端工程师&lt;/em&gt;&lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，而更像是&lt;em&gt;光学系统运维&lt;/em&gt;&lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，分类得大概并不算准确。&lt;/p&gt;
&lt;h2 id=&#34;物理光学演示lightpipes&#34;&gt;物理光学演示：LightPipes&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/lightpipes.png&#34; width=&#34;50%&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;正像我之前说的那样，我使用&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;opticspy/lightpipes&lt;/a&gt;完成了一部分激光物理过程的模拟，这个库大体上能够满足我当时的要求。但是要注意的是，个人感觉这个库是为了物理实验、教学演示而设计的，揭示原理的部分多于实际计算的部分，而且计算是序列化的。或许把它理解成类似&lt;a href=&#34;https://phet.colorado.edu/zh_CN/simulations/filter?subjects=physics&amp;amp;type=html&#34;&gt;虚拟物理实验室&lt;/a&gt;更好？&lt;/p&gt;
&lt;p&gt;不过如果能力足够的话，大概能在上面实现一些比较复杂的功能。&lt;del&gt;而且话又说回来，真正有一些严肃需求的人，早就去求助一些商业软件了。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;光线追迹ray-tracing&#34;&gt;光线追迹（Ray Tracing）&lt;/h2&gt;
&lt;p&gt;在上次的博文里，在光线追迹方面，我曾经介绍过&lt;a href=&#34;https://github.com/Sterncat/opticspy&#34;&gt;Sterncat/opticspy&lt;/a&gt;，&lt;a href=&#34;https://github.com/quartiq/rayopt&#34;&gt;RayOpt&lt;/a&gt;和&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;cihologramas/pyoptools&lt;/a&gt;，其中，前两组大概已经停止更新了，反而&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;pyoptools&lt;/a&gt;看起来处于活跃开发的阶段。另外，这次我还看到了三个新鲜面孔：&lt;a href=&#34;https://github.com/mjhoptics/ray-optics&#34;&gt;mjhoptics/ray-optics&lt;/a&gt;、&lt;a href=&#34;https://salsa.debian.org/mess42/pyrate/&#34;&gt;mess42/pyrate&lt;/a&gt;和&lt;a href=&#34;https://github.com/bryancole/raypier_optics&#34;&gt;bryancole/raypier_optics&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ray-optics&#34;&gt;ray-optics&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/rayoptics.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;ray-optics的Qt界面&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;序列化&lt;/em&gt;的光线追迹，或成像光学，完成度很高，甚至自带一个类似Zemax的界面。在其&lt;a href=&#34;https://ray-optics.readthedocs.io/en/latest/Introduction.html&#34;&gt;手册&lt;/a&gt;上提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rethink how image forming optical calculations are done absent historical constraints on computer speed and memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我学不会光学设计肯定是因为软件历史包袱太重，嗯。&lt;/p&gt;
&lt;h3 id=&#34;raypier&#34;&gt;Raypier&lt;/h3&gt;
&lt;p&gt;非序列的光学追迹，在几何光学传输的基础上增加了一部分高斯光束和衍射效应，并且可以（通过VTK）生成一些漂亮的三维模型。（之后我一定要想办法成功安装……）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raypier-optics.readthedocs.io/en/latest/&#34;&gt;文档&lt;/a&gt;在这里。&lt;/p&gt;
&lt;h3 id=&#34;pyrate&#34;&gt;pyrate&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/pyrate_in_freecad.png&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;正在写这篇博文的时候，我发现了这一套&lt;a href=&#34;https://salsa.debian.org/mess42/pyrate/&#34;&gt;代码&lt;/a&gt;，似乎可以与FreeCAD互动，但是更具体的功能和特性还没有仔细看。毕竟我还没找到文档在哪里……&lt;/p&gt;
&lt;h3 id=&#34;pyoptools&#34;&gt;pyoptools&lt;/h3&gt;
&lt;p&gt;大概还在紧张地开发之中，等&lt;a href=&#34;https://pyoptools.readthedocs.io/en/latest/raytrace.html&#34;&gt;文档&lt;/a&gt;写好之后我会再回来看看的。&lt;/p&gt;
&lt;h3 id=&#34;另ricktu288ray-opticshttpsgithubcomricktu288ray-optics&#34;&gt;另：&lt;a href=&#34;https://github.com/ricktu288/ray-optics&#34;&gt;ricktu288/ray-optics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当然不是用Python编写的，但是谁不喜欢&lt;a href=&#34;https://ricktu288.github.io/ray-optics/&#34;&gt;开箱即用&lt;/a&gt;的玩具呢？&lt;/p&gt;
&lt;h3 id=&#34;另beam4httpswwwstellarsoftwarecom及其他&#34;&gt;另：&lt;a href=&#34;https://www.stellarsoftware.com/&#34;&gt;Beam4&lt;/a&gt;及其他&lt;/h3&gt;
&lt;p&gt;也许代码就像蘑菇一样，找到一个又有另外两个出来。Beam4是用Java编写的，但看起来成熟度比这里的很多库高得多，比如将要提到的两个。&lt;/p&gt;
&lt;p&gt;我把&lt;a href=&#34;https://github.com/GNiendorf/tracepy&#34;&gt;tracepy&lt;/a&gt;、&lt;a href=&#34;https://github.com/kunguz/odak&#34;&gt;odak&lt;/a&gt;和&lt;a href=&#34;https://github.com/optcom-org/optcom&#34;&gt;optcom&lt;/a&gt;列在这里，只是为了之后不要重新发现它们了。求求你们好好写写文档吧……&lt;/p&gt;
&lt;h2 id=&#34;光学设计为望远镜日冕仪准备的python&#34;&gt;光学设计：为望远镜/日冕仪准备的Python&lt;/h2&gt;
&lt;p&gt;你想学习怎样设计日冕仪吗？&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/poppy.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;詹姆斯·韦伯空间望远镜的光学设计，来自poppy&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;就像所有的专业软件一样，如果你理解了整个物理过程，中间的示意图就并不是那么重要了。这样的库包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brandondube/prysm&#34;&gt;brandondube/prysm&lt;/a&gt; (&lt;a href=&#34;https://prysm.readthedocs.io/en/stable/examples/index.html&#34;&gt;examples&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spacetelescope/poppy&#34;&gt;spacetelescope/poppy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ajeldorado/falco-python&#34;&gt;ajeldorado/falco-python&lt;/a&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ehpor/hcipy&#34;&gt;ehpor/hcipy&lt;/a&gt; (&lt;a href=&#34;https://docs.hcipy.org/dev/tutorials/index.html&#34;&gt;examples&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等。&lt;/p&gt;
&lt;p&gt;它们大概都能够计算光学系统的点扩散函数（PSF）、调制传递函数（MTF）、点列图之类的，而优化算法似乎欠奉&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。如果你对上面的一系列名词不大了解的话，建议和我一起补习&lt;a href=&#34;http://www.optzmx.com/forum.php?mod=viewthread&amp;amp;tid=1131&amp;amp;highlight=%B9%E2%D1%A7%CF%B5%CD%B3&#34;&gt;《光学系统设计》&lt;/a&gt;。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/know-everything.jpg&#34;
    alt=&#34;我逐渐理解一切&#34; width=&#34;30%&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;这些库的对比可以看&lt;a href=&#34;https://arxiv.org/abs/1807.07042&#34;&gt;这里&lt;/a&gt;。&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;如果你真的想设计日冕仪的话也可以读一读这篇文献，那里对设计方法也有一些介绍。&lt;/p&gt;
&lt;p&gt;就我而言，我比较喜欢&lt;code&gt;HCIPy&lt;/code&gt;，至少这里面还包含一些传递过程的内容，不至于直接跳到结论，和上个部分的库们更加接近一些。&lt;/p&gt;
&lt;h2 id=&#34;另一类光线追迹&#34;&gt;另一类光线追迹&lt;/h2&gt;
&lt;p&gt;这种的主要目的是为了让自己的文章显得更好看，所以我就直接放两张图：&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/raysect.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Raysect生成的，就好像杂志封面一样&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/inkscape_ray_tracing.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;光线追迹——用inkscape更简单的画图方式&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;三维：&lt;a href=&#34;https://github.com/raysect/source&#34;&gt;Raysect&lt;/a&gt;，或者也可以用Blender+&lt;a href=&#34;https://github.com/CodeFHD/OptiCore&#34;&gt;OptiCore&lt;/a&gt;+&lt;a href=&#34;https://github.com/LuxCoreRender/LuxCore&#34;&gt;LuxCore&lt;/a&gt;（&lt;a href=&#34;https://www.youtube.com/watch?v=3hln88ukiZI&#34;&gt;youtube&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;二维：&lt;a href=&#34;https://github.com/damienBloch/inkscape-raytracing&#34;&gt;inkscape-raytracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;电磁场级别的仿真&#34;&gt;电磁场级别的仿真&lt;/h2&gt;
&lt;p&gt;无论是用EME法求解模式的&lt;a href=&#34;https://github.com/demisjohn/CAMFR&#34;&gt;CAMFR&lt;/a&gt;，还是用FDTD法计算电磁场的&lt;a href=&#34;https://github.com/NanoComp/meep&#34;&gt;meep&lt;/a&gt;，都远远超出了我的能力，请有识之士自行判断。&lt;/p&gt;
&lt;h2 id=&#34;激光谐振腔的简单计算&#34;&gt;激光谐振腔的简单计算&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;www.rezonator.orion-project.org&#34;&gt;rezonator&lt;/a&gt;、&lt;a href=&#34;https://github.com/simcav/simcav&#34;&gt;simcav/simcav&lt;/a&gt;等，或许过于简单了，可能LightPipes能做的事情还要更多一些。&lt;/p&gt;
&lt;h2 id=&#34;大气光谱学&#34;&gt;大气光谱学&lt;/h2&gt;
&lt;p&gt;请移步&lt;a href=&#34;https://github.com/erwanp/awesome-spectra#atmospheric-spectra&#34;&gt;这里&lt;/a&gt;和&lt;a href=&#34;https://www.researchgate.net/publication/333046820_Py4CAtS-PYthon_for_Computational_ATmospheric_Spectroscopy&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;pynlo.png&#34; alt=&#34;pyNLO&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pyNLO/PyNLO&#34;&gt;PyNLO&lt;/a&gt;：与非线性光学有关，大概是&lt;code&gt;SNLO&lt;/code&gt;的某种代替品。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jomiri/pyfiberamp&#34;&gt;Jomiri/pyfiberamp&lt;/a&gt;：有关掺Er光纤激光器的计算。没有什么用处。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AOtools/soapy&#34;&gt;AOtools/soapy&lt;/a&gt;：用于自适应光学过程的模拟，另有一组&lt;a href=&#34;https://github.com/AOtools/aotools&#34;&gt;用于分析&lt;/a&gt;的库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gwoptics.org/finesse/&#34;&gt;Finesse and PyKat&lt;/a&gt;：为了LIGO设计的语言，用于引力波探测器的光路设计。这次我依旧没有看懂。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aps.anl.gov/Science/Scientific-Software/OASYS&#34;&gt;OASYS&lt;/a&gt;：如果X射线也是光的话，那么&lt;a href=&#34;https://github.com/oasys-kit/wofry&#34;&gt;WOFRY&lt;/a&gt;也是光学计算。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scottprahl/laserbeamsize&#34;&gt;laserbeamsize&lt;/a&gt;：一个完善的激光光斑直径和$M^2$计算库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之祝大家好运吧。如果有条件的话，还是尽量使用商业软件。Seriously.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;据我了解并不存在前两种职业。而运维在哪里都存在。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;感觉这些既会光学又会Python的人，在起名字方面都没有什么创意。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;A J Eldorado Riggs, Garreth Ruane, Erkin Sidick, Carl Coker, Brian D. Kern, Stuart B. Shaklan, &amp;quot;Fast linearized coronagraph optimizer (FALCO) I: a software toolbox for rapid coronagraphic design and wavefront correction,&amp;quot; Proc. SPIE 10698, Space Telescopes and Instrumentation 2018: Optical, Infrared, and Millimeter Wave, 106982V (9 August 2018); &lt;a href=&#34;https://doi.org/10.1117/12.2313812&#34;&gt;https://doi.org/10.1117/12.2313812&lt;/a&gt;，&lt;a href=&#34;https://core.ac.uk/download/pdf/211386255.pdf&#34;&gt;PDF文件&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;如果尝试优化的话，可以看看&lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0030402618315821&#34;&gt;doi:10.1016/j.ijleo.2018.10.073&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Ruane, G., “Review of high-contrast imaging systems for current and future ground- and space-based telescopes I: coronagraph design methods and optical performance metrics”, in &lt;i&gt;Space Telescopes and Instrumentation 2018: Optical, Infrared, and Millimeter Wave&lt;/i&gt;, 2018, vol. 10698. doi:10.1117/12.2312948.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python中光学计算相关的库/Awesome Python for Optics</title>
      <link>http://localhost:1313/2019/08/04/python-for-optics/</link>
      <pubDate>Sun, 04 Aug 2019 20:03:49 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/04/python-for-optics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;来自2021-07-24的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文的2021年版本在&lt;a href=&#34;http://localhost:1313/2021/07/21/python-for-optics-in-2021/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是2019年的原文。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这大概是本博客第一次涉及博主在现实世界中的本职工作，大概算是一个好的开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在光学设计及模拟的领域，商业软件，比如Zemax/Code V、LASCAD、GLAD等，提供了较为完整的解决方案，对于较为前沿的领域，国内研究的事实标准是，通过MATLAB自行编写可靠性和可维护性都存在较大问题的脚本。但是，对于一些&lt;del&gt;研究经费不足同时工作量不饱和的&lt;/del&gt;课题组，了解这个古老的学科与当今流行语言的交集，可能也具有一定的意义。&lt;/p&gt;
&lt;p&gt;TL; DR：光学计算是一个很宽泛的话题，针对我的要求，之后我大概会试试&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;LightPipes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;以下是我找到的一些库的对比。&lt;/p&gt;
&lt;h2 id=&#34;spacetelescopepoppyhttpsgithubcomspacetelescopepoppy&#34;&gt;&lt;a href=&#34;https://github.com/spacetelescope/poppy&#34;&gt;spacetelescope/poppy&lt;/a&gt;&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/2019/08/04/python-for-optics/poppy.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;这个库本身是为詹姆斯·韦伯空间望远镜的模拟而设计的，从其&lt;a href=&#34;https://nbviewer.jupyter.org/github/spacetelescope/poppy/blob/master/notebooks/POPPY_tutorial.ipynb&#34;&gt;tutorial&lt;/a&gt;也可以看出，这个库的主要目的大概是，在衍射明显的条件下模拟成像过程、计算点扩散函数并分析成像质量，特别是针对天文望远镜领域。&lt;/p&gt;
&lt;p&gt;因为我并不真正 &lt;em&gt;理解&lt;/em&gt; 光学成像，我并没有办法判断该库的潜在用途，不过在激光器设计方面该库可能并不适用。&lt;/p&gt;
&lt;h2 id=&#34;sterncatopticspyhttpsgithubcomsterncatopticspy&#34;&gt;&lt;a href=&#34;https://github.com/Sterncat/opticspy&#34;&gt;Sterncat/opticspy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;opticspy.png&#34; alt=&#34;opticspy&#34;&gt;&lt;/p&gt;
&lt;p&gt;看起来，这个库主要用于镜片设计，类似Zemax/Code V等软件所做的那样。具体上，能够完成光线追迹（但是没说能够优化），利用泽尼克多项式拟合（透镜表面/波前？），并计算镜片表面的干涉条纹。下次如果要计算纯粹干涉方面的内容我可能会尝试一下这个。&lt;/p&gt;
&lt;p&gt;另外，这个库散发着一种爱好者的气息，&lt;code&gt;施工中&lt;/code&gt;标志散落在文档各处。&lt;del&gt;对于这种类型的项目可能还是让企业来做比较合适；可是开源之后又赚不到钱。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;nanocompmeephttpsgithubcomnanocompmeep&#34;&gt;&lt;a href=&#34;https://github.com/NanoComp/meep&#34;&gt;NanoComp/meep&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;meep.png&#34; alt=&#34;meep&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-difference_time-domain_method&#34;&gt;FDTD&lt;/a&gt;法计算电磁场。这玩意让我想起了我短暂的研究生岁月，那时我学到一件事……人的能力是有极限的。&lt;/p&gt;
&lt;p&gt;下一个。&lt;/p&gt;
&lt;h2 id=&#34;sympyhttpsdocssympyorglatestmodulesphysicsopticsindexhtml&#34;&gt;&lt;a href=&#34;https://docs.sympy.org/latest/modules/physics/optics/index.html&#34;&gt;SymPy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SciPy的一个组成部分，拥有一个光学计算模块，但仅仅在代入公式的水平。嗯，如果只是要算算高斯光的传输矩阵什么的，问题应该不大。&lt;/p&gt;
&lt;h2 id=&#34;cihologramaspyoptoolshttpsgithubcomcihologramaspyoptools&#34;&gt;&lt;a href=&#34;https://github.com/cihologramas/pyoptools&#34;&gt;cihologramas/pyoptools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大概也是Ray Trace，大概也是个人作品，而且例子都是用一种我看不懂的语言写的。下一个。&lt;/p&gt;
&lt;h2 id=&#34;rezonatorwwwrezonatororion-projectorgsimcavsimcavhttpsgithubcomsimcavsimcav等&#34;&gt;&lt;a href=&#34;www.rezonator.orion-project.org&#34;&gt;rezonator&lt;/a&gt;、&lt;a href=&#34;https://github.com/simcav/simcav&#34;&gt;simcav/simcav&lt;/a&gt;等&lt;/h2&gt;
&lt;p&gt;Rezonator其实不能算是Python库，不过倒也是免费的，而且做的比另一个程序更完整一些。这两个软件的功能比较类似，仅通过谐振腔传输矩阵计算激光谐振腔特性，对于简单的腔形，可能这个就足够了。&lt;/p&gt;
&lt;h2 id=&#34;opticspylightpipeshttpsgithubcomopticspylightpipes&#34;&gt;&lt;a href=&#34;https://github.com/opticspy/lightpipes&#34;&gt;opticspy/lightpipes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;lightpipes.png&#34; alt=&#34;lightpipes&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后我找到的是这个，它的&lt;a href=&#34;http://www.okotech.com/lightpipes&#34;&gt;官网&lt;/a&gt;上说，这本来是一个*nix下的C++库，1999年开源，并增加了免费Python接口——听起来很靠谱。
具体上来说，这玩意也包含几何光学和衍射光学的相关内容，而且在它的说明文档里直接体现了&lt;a href=&#34;https://github.com/opticspy/Optics/blob/master/GeometricOptics/resonator_geometric_optics.ipynb&#34;&gt;高斯光谐振腔矩阵计算&lt;/a&gt;和&lt;a href=&#34;https://opticspy.github.io/lightpipes/examples_of_lightpipes_for_python.html#laser-examples&#34;&gt;强衍射条件下谐振腔的计算&lt;/a&gt;（虽然我还没有看懂）。&lt;/p&gt;
&lt;p&gt;之后，可能会在这个的基础上对激光器进行一些分析——如果计划没有变更的话。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;来自2019-10-23的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;finesse-and-pykathttpwwwgwopticsorgfinesse&#34;&gt;&lt;a href=&#34;http://www.gwoptics.org/finesse/&#34;&gt;Finesse and PyKat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了LIGO设计的语言，用于引力波探测器的光路设计。Finesse有一种十分简单而复古的语法，而&lt;a href=&#34;http://www.gwoptics.org/pykat&#34;&gt;PyKat&lt;/a&gt;与其说是它的 &lt;em&gt;封装&lt;/em&gt; ，倒不如说是拿报纸包了一下。&lt;/p&gt;
&lt;p&gt;当然，该程序的功能还是挺强大的，甚至还有一些量子光学的内容&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。如果有人想要尝试的话，可以从&lt;a href=&#34;http://www.gwoptics.org/learn/&#34;&gt;这里&lt;/a&gt;开始。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;来自2020-6-1的更新：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;rayopthttpsgithubcomquartiqrayopt&#34;&gt;&lt;a href=&#34;https://github.com/quartiq/rayopt&#34;&gt;RayOpt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;rayopt.png&#34; alt=&#34;rayopt&#34;&gt;
&lt;img src=&#34;rayopt2.png&#34; alt=&#34;rayopt&#34;&gt;&lt;/p&gt;
&lt;p&gt;和&lt;a href=&#34;#sterncatopticspyhttpsgithubcomsterncatopticspy&#34;&gt;opticspy&lt;/a&gt;一样，RayOpt也是一组用于代替Zemax的程序，&lt;strong&gt;看起来&lt;/strong&gt;更不像一个玩具。当然，如果要对这样的库作出一个中肯的评价，我觉得至少还要学习十年左右。所以我只是把它列在这里，并且祝&lt;em&gt;路过的旅行者&lt;/em&gt;好运。&lt;/p&gt;
&lt;p&gt;另外，我下次更新这篇文章的时候，差不多要给它们分分类了。毕竟光学计算是一个很宽泛的话题。&lt;del&gt;我先立一个flag在这里。&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;比如&lt;a href=&#34;http://www.gwoptics.org/finesse/reference/&#34;&gt;语法说明&lt;/a&gt;里提到了squeezed vacuum input source。不要问我&lt;a href=&#34;https://en.wikipedia.org/wiki/Squeezed_coherent_state&#34;&gt;那是什么&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>另一些预测未来的尝试，以及问题</title>
      <link>http://localhost:1313/2018/05/02/dont-trust-the-oracle/</link>
      <pubDate>Wed, 02 May 2018 20:30:20 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/05/02/dont-trust-the-oracle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/2018/03/26/who-will-roll-the-dice/&#34;&gt;之前&lt;/a&gt;写到，我们不能从水晶球中看到未来的清晰倒影。而本次的结论更加悲观：那些模糊的幻象基本上没有任何效果，并且很可能是有害的。&lt;/p&gt;
&lt;p&gt;另，本文部分是&lt;a href=&#34;https://book.douban.com/subject/25782902/&#34;&gt;《反脆弱》&lt;/a&gt;的读书笔记。虽然作者有的观点&lt;del&gt;过于极端&lt;/del&gt;让人不爽，但是其理论仍能给人启发……特别是对于梦想预测未来的人来说。&lt;/p&gt;
&lt;h2 id=&#34;现实参数太多而数据量太少&#34;&gt;现实：参数太多而数据量太少&lt;/h2&gt;
&lt;p&gt;作为一个实验室民工，当我在说“波长与温度成正比”的时候，大概只需要测量8次就够了。可是，当参数太多（而且不能控制变量）的时候，情况变得复杂起来。很多时候，能够得到的数据大概是这样：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;time&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1996-03-16&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.75&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2007-04-22&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018-09-01&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;提问：$y=?$&lt;/p&gt;
&lt;p&gt;A. $y=5a$&lt;/p&gt;
&lt;p&gt;B. $y=15b+10c-10d$&lt;/p&gt;
&lt;p&gt;C. $y=\text{random}()$&lt;/p&gt;
&lt;p&gt;&lt;del&gt;D. $y$是当天大乐透的尾号&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;当然，作为实验民工的话，&lt;code&gt;正交试验法&lt;/code&gt;、&lt;code&gt;典型相关分析&lt;/code&gt;和&lt;code&gt;主成分分析&lt;/code&gt;是找到复杂特性的好手段。可是，现实生活中，并不存在重复实验的条件，而且，我们甚至不能将所有参数一一列举出来。最糟糕的情况下，重要的原因仍然藏在水底。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/img/iceberg.png&#34;
    alt=&#34;大家喜闻乐见的冰山图.jpg&#34;&gt;&lt;figcaption&gt;
      &lt;p&gt;大家喜闻乐见的冰山图.jpg&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;这时候，关于预测未来这件事，出现了两种截然相反的手段。&lt;/p&gt;
&lt;h2 id=&#34;假先知们的伎俩冗余的参数与神秘主义&#34;&gt;（假）先知们的伎俩：冗余的参数与神秘主义&lt;/h2&gt;
&lt;p&gt;有时候，仅仅是声称能够预测未来就可以带来实际的好处，无论正确与否；&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;同时，生物似乎倾向于在事物中寻找规律&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。于是，为了垄断对未来的解释权，在可以观察到的参数之外，这些预言家们倾向于将原因复杂化，典型的手法包括“神的旨意”、“群星的角度”和“技术分析”等等。&lt;/p&gt;
&lt;p&gt;此时，由于参数的过量，过拟合能够获得对历史数据相当精确的表述（以及对占卜师的信任），然而其预测能力并不像看起来那样强。但是，我们并没有办法判断预言的正确&lt;code&gt;程度&lt;/code&gt;（今天的恋爱运是69%），同时养成了在新事件发生之后不翻旧账的好习惯（没有“昨日运势”的地址）。这样的假先知在每个时代都能够占据一席之地。&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;应对这样的预言家有一个简单的办法：“不要询问他的意见、预测或建议。只要问他们的投资组合中有什么或者没有什么就行。”换一个时髦一些的说法，叫做“利益相关”，这样的话，错误的预言至少能够得到一些代价。&lt;/p&gt;
&lt;h2 id=&#34;奥卡姆剃刀以及为什么在现实中可能失效&#34;&gt;奥卡姆剃刀，以及为什么在现实中（可能）失效&lt;/h2&gt;
&lt;p&gt;之前已经提到过&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80&#34;&gt;过拟合&lt;/a&gt;这一概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当可选择的参数的自由度超过数据所包含信息内容时，会减少或破坏模型一般化的能力更甚于适应数据。（维基百科）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说，奥卡姆剃刀是解决过拟合问题的有效途径。在预测能力相似的情况下，引入的假定越少越好。在贝叶斯理论下，可以通过贝叶斯因子（或其不够精确的代替品，&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E8%B5%A4%E6%B1%A0%E4%BF%A1%E6%81%AF%E9%87%8F%E5%87%86%E5%88%99&#34;&gt;赤池信息量准则&lt;/a&gt;等等）来进行判断。现实生活中的噪音比实验数据更多，按理说剃刀会更加锋利，但是，与数学模型不同，生活中：&lt;/p&gt;
&lt;h3 id=&#34;样本仍然不足&#34;&gt;样本（仍然）不足&lt;/h3&gt;
&lt;p&gt;我们再次遇到了这个问题。生活中很多时候，我们获得的信息类似这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“你看隔壁小李，多年的xxx就是吃这个药好的”&lt;/li&gt;
&lt;li&gt;“啥，出去跑步来着？那没关系，药还是得喝”&lt;/li&gt;
&lt;li&gt;“副作用？没事！老王喝了二十多年了身体倍儿棒”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅看这些对话，可以得到一个解释力很强，假设又很少的理论，当然我们并不会相信它。日常生活中所能够得到的样本大概如此，有效信息量甚至比噪音还低。指望从中获取什么一般规律/人生哲理/生活智慧，基本上是不现实的——除了给自己增加一些盲目的自信之外。&lt;/p&gt;
&lt;h3 id=&#34;火鸡与农场主黑天鹅效应以及损失敏感性&#34;&gt;“火鸡与农场主”、黑天鹅效应、以及损失敏感性&lt;/h3&gt;
&lt;p&gt;数学与现实生活的另一个区别是，数学是永恒的。只要公理和逻辑不变，同样的算式总是可以期待相同的结果。而现实生活则不同，每天的日常生活很可能是连续发生的奇迹，而且，一旦奇迹不再发生，很可能带来灾难性的结果。这一问题再次提升了预言的难度：不仅需要对未来的平均值，而且对其方差/极端情况进行描绘。&lt;/p&gt;
&lt;p&gt;同时，相比正确的预测，错误的预测一般会带来更加恶劣的影响，在心理上也会更强的挫败感，这由我们的本能所决定。&lt;/p&gt;
&lt;h2 id=&#34;那么&#34;&gt;那么……&lt;/h2&gt;
&lt;p&gt;很多时候，人们观察到了一个（或一组）现象，然后盲目地寻找到一个原因，并认为得到了正确的答案。这在我们进化初期十分有效，在今天也比投硬币决定稍微好一些——如果用于决策的证据真的不够的话。&lt;/p&gt;
&lt;p&gt;在更多的情况下，预测未来（并信任这一预测）并不是个好主意。&lt;a href=&#34;https://en.wikipedia.org/wiki/Dutch_book&#34;&gt;荷兰赌&lt;/a&gt;/两边下注/无风险套利可能是更明智的选择。由于日常生活并不是由精明的数学家所设计，这种机会仍是有可能存在的。&lt;/p&gt;
&lt;p&gt;在必须要做出决定的时候，可能需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽可能地获取无偏见的信息；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当然，所谓“无偏见”又是另一个故事了。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;只下能够赔得起的赌注；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;或者完全不下赌注——如果想成为预言家，而且没有道德洁癖的话。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;来自19-6-9：&lt;/p&gt;
&lt;p&gt;前几天突然想起一个例子。我们宇宙的最终命运——是重新回到一个闪耀的奇点，还是变成冰冷稀薄的碎片，和&lt;a href=&#34;https://zh.wikipedia.org/zh/%E5%AE%87%E5%AE%99%E5%AD%B8%E5%B8%B8%E6%95%B8&#34;&gt;一个常数&lt;/a&gt;相关。现在的观测结果显示，这个常数很接近两种可能的分界线，但我们并不能确定自己是对的：&lt;a href=&#34;https://www.solidot.org/story?sid=60885&#34;&gt;对暗物质质量的计算已经很困难&lt;/a&gt;，更不要提什么暗能量了。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;一部分可能由于&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E8%87%AA%E8%AF%81%E9%A2%84%E8%A8%80&#34;&gt;自证预言&lt;/a&gt;，另一部分可能就是流行的KOL什么的了。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;不仅仅是条件反射，而且有非常类似人类的&lt;a href=&#34;http://www.psychspace.com/psy/school/001/%27SUPERSTITION%27%20IN%20THE%20PIGEON.htm&#34;&gt;“迷信行为”&lt;/a&gt;（&#39;SUPERSTITION&#39; IN THE PIGEON, B. F. Skinner）。我最近才在素材库里发现这个有趣的现象。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;我试图让我不要再刷那些占星师的微博了，但是我瞪了自己一眼，然后说：“不”。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>随机性从哪里来？</title>
      <link>http://localhost:1313/2018/03/26/who-will-roll-the-dice/</link>
      <pubDate>Mon, 26 Mar 2018 21:03:21 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/03/26/who-will-roll-the-dice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;当然，没准可以预测“真空中的球形未来”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;量子力学&#34;&gt;量子力学……&lt;/h2&gt;
&lt;p&gt;我们都听说过“两朵乌云”的故事，其中一朵后来变成了&lt;strong&gt;量子力学&lt;/strong&gt;，告诉我们上帝（也许）是掷骰子的。这是截止到目前，所有苛刻的家伙都承认的“真正随机”。而且，通过一些简单的装置（比如盖格计数器或者一个虐猫狂人），这些随机可以进入宏观的现实生活。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;或许有一天，我们会发现&lt;code&gt;量子效应只是物质之海表面的涟漪，是物质更深层规律扰动的影子&lt;/code&gt;&lt;/del&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;——但是，这仍不能让我们真正成为预言家，还有一些东西在阻止我们。&lt;/p&gt;
&lt;h2 id=&#34;并不是随机的唯一来源&#34;&gt;……并不是随机的唯一来源&lt;/h2&gt;
&lt;p&gt;让我们回到乌云飘来之前。那时候的人们充满了工业革命带来的乐观精神，相信自然是和谐、简单、可预测的：穷尽数学系统，可以找到所有数学定理的证明；如果我们了解整个世界的状态，就可以计算出下一秒的世界。如果没有量子力学，这听起来似乎没有什么问题，除了——&lt;/p&gt;
&lt;h3 id=&#34;这里不欢迎近似&#34;&gt;这里不欢迎近似&lt;/h3&gt;
&lt;p&gt;即使是微小的误差，也会放大到不可接受的结果，这就是所谓的蝴蝶效应——&lt;/p&gt;
&lt;h3 id=&#34;空白处太小放不下计算机&#34;&gt;空白处太小，放不下计算机&lt;/h3&gt;
&lt;p&gt;——而且，计算机本身的计算能力也是有限的。不，这不是说Intel又开始挤牙膏了，而是说作为物质本身，其计算能力有限制。对于我们的宇宙来说，它能够计算的总数据不超过$10^{120}$比特&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:可能做一根足够长的杠杆还要更简单一些。&lt;/p&gt;
&lt;h3 id=&#34;甚至&#34;&gt;甚至……&lt;/h3&gt;
&lt;p&gt;即使我们真的掏空宇宙做出一台超级计算机，当它真正开始计算的时候，首先需要计算自己的状态，那么，首先需要计算&lt;code&gt;计算自己状态时自己的状态&lt;/code&gt;……&lt;/p&gt;
&lt;p&gt;正如&lt;code&gt;证明所有数学定律&lt;/code&gt;，&lt;code&gt;找到不属于自身的集合的集合&lt;/code&gt;，&lt;code&gt;或者判断是不是会停机&lt;/code&gt;一样，当我们观察系统的时候，需要把自己从系统中排除。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;刘慈欣，《镜子》。原谅我总喜欢拿科幻小说作例子，这纯粹是因为它们“可能性”的种类比较多。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;以上那一行叙述似乎暗示着隐变量理论，作为爱因斯坦&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5NDA1Njg2MA==&amp;amp;mid=2651981696&amp;amp;idx=1&amp;amp;sn=f4da01857707385ad4c44c8dc9e7c942&amp;amp;scene=2&amp;amp;srcid=0428O8l58rK5JeqU4x9KHYbs&amp;amp;from=timeline&amp;amp;isappinstalled=0#%23&#34;&gt;从上帝手中夺过骰子&lt;/a&gt;的方案。然而，加上删除线的原因是，&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20202069&#34;&gt;对贝尔不等式的实验&lt;/a&gt;宣告了这种理论的终结。个人而言，我还是比较喜欢这种随机性比较高的世界。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;见&lt;a href=&#34;https://doi.org/10.1103/PhysRevLett.88.237901&#34;&gt;https://doi.org/10.1103/PhysRevLett.88.237901&lt;/a&gt;。老实说，这个量与普朗克长度有关，我们还是躲不开量子力学 ;-)&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>幂律分布与Zipf&#39;s Law</title>
      <link>http://localhost:1313/2017/12/16/zipf-law/</link>
      <pubDate>Sat, 16 Dec 2017 20:48:36 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/12/16/zipf-law/</guid>
      <description>&lt;p&gt;前几天读了&lt;a href=&#34;https://book.douban.com/subject/6749832/&#34;&gt;《复杂》&lt;/a&gt;。对复杂学的研究，在人工智能重获热度的今天，似乎获得了新的意义——当然，我们还是不知道炼金术的大锅里面发生了什么。&lt;/p&gt;
&lt;p&gt;幂律分布/Zipf定律/&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B8%95%E7%B4%AF%E6%89%98%E6%B3%95%E5%88%99&#34;&gt;帕累托法则&lt;/a&gt;/80-20定律/whatever，本质上是同一种东西。这种分布模式和正态分布类似，广泛存在于大自然和人造物的各个角落。一般来说，对于具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优先连接性（Preferential attachment）/马太效应
&lt;ul&gt;
&lt;li&gt;“凡有的，还要加给他，叫他有余；没有的，连他所有的也要夺过来。”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成长性
&lt;ul&gt;
&lt;li&gt;网络的尺度不受客观条件的限制，可以无限增长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;的网络，其节点连接数较为满足幂律分布。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fCn8zs912OE&#34;&gt;Youtube上&lt;/a&gt;有个视频对幂律分布讲得很清楚，对其中提到的两个实验，我利用python进行了模拟。模拟中使用的&lt;code&gt;jupyter notebook&lt;/code&gt;文件放在了&lt;a href=&#34;https://gist.github.com/heyeshuang/fece5abbd6d1cf826dbaf9c3e76361b7&#34;&gt;github gist&lt;/a&gt;上。&lt;/p&gt;
&lt;h2 id=&#34;猴子和打字机&#34;&gt;猴子和打字机&lt;/h2&gt;
&lt;p&gt;一只猴子（我们叫它Shashi Biya）在打字机上乱敲，它敲二十六个字母和空格概率都相等。那么，咱们能不能看出他的用词习惯？答案是肯定的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Counter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;abcd &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monkey&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;choices(s, k&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10000000&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monkey&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; monkey&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Counter(monkey)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;common&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;most_common()[:&lt;span style=&#34;color:#f60&#34;&gt;10000&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fre&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[value &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (key,value) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; common]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;plot(fre)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;xscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;yscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/zipf/output_5_0.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;阶梯形状可能是由于概率相等&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我们的这位大文豪颇有古风，喜欢用单字（“a”）胜过长单词（“ffsda”），而且用词比例正符合幂律分布：在双log坐标系下，图像大致是一条直线。这很符合直觉：为了得到任何长度大于1的单词，猴子第二次敲的按钮必须不是空格。&lt;/p&gt;
&lt;p&gt;不要嘲笑我们的前辈，人类的语言也具有相同的性质，虽然概率最高的字是the什么的。并不是Zipf’s law限制了猴子打出十四行诗，这或许是个好消息。&lt;/p&gt;
&lt;h2 id=&#34;连接曲别针第一种方法&#34;&gt;连接曲别针，第一种方法&lt;/h2&gt;
&lt;p&gt;在墙上钉100个钉子，然后随意把曲别针连在上面。哪个钉子上曲别针越多，下一个曲别针挂在上面的概率就越高。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ones(l)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[j&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    k&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;choice(l,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[k]&lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;plot(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;,reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;xscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;yscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;show() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#指数分布&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/zipf/output_9_0.png&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;可惜这只是个指数分布&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;与幂律分布相比，指数分布更加“平缓”，而且在双对数坐标系下也并不是一条直线。&lt;/p&gt;
&lt;h2 id=&#34;连接曲别针the-right-way&#34;&gt;连接曲别针，the right way&lt;/h2&gt;
&lt;p&gt;现在，我有一把曲别针。我随便拿出两个曲别针，并把它们两个所在的串连接起来。&lt;/p&gt;
&lt;p&gt;假设我对每一个曲别针没有特别的爱好，那么，某个串选中的概率，与串中的曲别针个数正相关。这就是所谓的优先连接性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tic&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;timeit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;default_timer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;20000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;14000&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[j&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    k1&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;choice(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;),&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a1&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(k1[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[j&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    k2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;choice(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;),&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, p&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(k2[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(a1&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;a2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;toc&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;timeit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;default_timer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(toc&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;tic)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;plot(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;,reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;xscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;yscale(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/zipf/output_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;好的，我们得到了 &lt;em&gt;基于曲别针的互联网系统&lt;/em&gt; ——至少可以算是个物联网。在这个网络里，（大概）80%的曲别针在20%的链子中，余下的曲别针散落在另外的地方。我们叫那些链子“曲别针巨头”。随着连接次数越来越多，链子越来越长，分散的曲别针越来越少，这就是“链子中心化”，我们现在互联网的状态。&lt;/p&gt;
&lt;p&gt;当继续这个过程的时候，最终（很快）就只剩下唯一一条长链，这就是我们互联网的末日&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;刘慈欣在还没有现在这么出名的时候，写过一篇叫做《赡养人类》的作品，提到了有关“终产者”的概念。当时，有人评论大刘“不懂政治，也不懂经济”，我十分希望这个人是对的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2018年4年3日的编辑：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ccNUtbywz9JgDI9pj6FJlw&#34;&gt;这里&lt;/a&gt;有另一个Zipf&#39;s Law的例子，可以看出，其仍然满足马太效应的性质。&lt;del&gt;另外，别人的故事编的还是好啊。&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;这似乎和&lt;a href=&#34;https://act.eff.org/action/protect-the-open-internet-order&#34;&gt;Net neutrality&lt;/a&gt;并不是一回事。并没有什么邪恶组织，邪恶的只有系统而已。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>